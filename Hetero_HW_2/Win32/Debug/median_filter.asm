; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26726.0 

	TITLE	d:\VS_Projects\Hetero_HW_2\_src\median_filter.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__6AAA6594_malloc.h DB 01H
__4631B3E8_xmmintrin.h DB 01H
__320E01E0_corecrt_stdio_config.h DB 01H
__BAC7FC50_corecrt_wstdio.h DB 01H
__A3797CDC_stdio.h DB 01H
__B73DAC4E_median_filter.cpp DB 01H
msvcjmc	ENDS
PUBLIC	?median_filter@@YAXHHHHPAE0@Z			; median_filter
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0P@BDJCEJHN@MEDIAN?5START?$CB?6@		; `string'
PUBLIC	??_C@_0N@MKGKEFKO@PIXEL?5?$CFdx?$CFd?6@		; `string'
PUBLIC	??_C@_0CD@HPPIJHBK@Pixel?5source?3?5?$CFd?6Filter?5source?3@ ; `string'
PUBLIC	??_C@_0BC@DMDABPEF@Pixel?5src_?$CFd?3?5?$CFd?6@	; `string'
PUBLIC	??_C@_0BC@FOKHLDBC@Pixel?5mod_?$CFd?3?5?$CFd?6@	; `string'
PUBLIC	??_C@_0O@CPHHODDO@MEDIAN?5STOP?$CB?6@		; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	?oddEvenSort@@YAXPAEH@Z:PROC			; oddEvenSort
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0O@CPHHODDO@MEDIAN?5STOP?$CB?6@
CONST	SEGMENT
??_C@_0O@CPHHODDO@MEDIAN?5STOP?$CB?6@ DB 'MEDIAN STOP!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FOKHLDBC@Pixel?5mod_?$CFd?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BC@FOKHLDBC@Pixel?5mod_?$CFd?3?5?$CFd?6@ DB 'Pixel mod_%d: %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DMDABPEF@Pixel?5src_?$CFd?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BC@DMDABPEF@Pixel?5src_?$CFd?3?5?$CFd?6@ DB 'Pixel src_%d: %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HPPIJHBK@Pixel?5source?3?5?$CFd?6Filter?5source?3@
CONST	SEGMENT
??_C@_0CD@HPPIJHBK@Pixel?5source?3?5?$CFd?6Filter?5source?3@ DB 'Pixel so'
	DB	'urce: %d', 0aH, 'Filter source:%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MKGKEFKO@PIXEL?5?$CFdx?$CFd?6@
CONST	SEGMENT
??_C@_0N@MKGKEFKO@PIXEL?5?$CFdx?$CFd?6@ DB 'PIXEL %dx%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BDJCEJHN@MEDIAN?5START?$CB?6@
CONST	SEGMENT
??_C@_0P@BDJCEJHN@MEDIAN?5START?$CB?6@ DB 'MEDIAN START!', 0aH, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A3797CDC_stdio.h
	call	@__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 961  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A3797CDC_stdio.h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 85   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __320E01E0_corecrt_stdio_config.h
	call	@__CheckForDebuggerJustMyCode@4

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vs_projects\hetero_hw_2\_src\median_filter.cpp
;	COMDAT ?median_filter@@YAXHHHHPAE0@Z
_TEXT	SEGMENT
$T1 = -376						; size = 4
_fx$2 = -172						; size = 4
_fy$3 = -160						; size = 4
_rgb$4 = -148						; size = 4
_filter_src$5 = -136					; size = 4
_pixel_src$6 = -124					; size = 4
_fval$7 = -112						; size = 6
_rd_offset$8 = -96					; size = 4
_col$9 = -84						; size = 4
_rd_base$10 = -72					; size = 4
_wr_base$11 = -60					; size = 4
_row$12 = -48						; size = 4
_frame$ = -36						; size = 25
__$ArrayPad$ = -4					; size = 4
_imgHeight$ = 8						; size = 4
_imgWidth$ = 12						; size = 4
_imgHeightF$ = 16					; size = 4
_imgWidthF$ = 20					; size = 4
_imgSrcExt$ = 24					; size = 4
_imgDst$ = 28						; size = 4
?median_filter@@YAXHHHHPAE0@Z PROC			; median_filter, COMDAT

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-380]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __B73DAC4E_median_filter.cpp
	call	@__CheckForDebuggerJustMyCode@4

; 64   : 	printf("MEDIAN START!\n");

	push	OFFSET ??_C@_0P@BDJCEJHN@MEDIAN?5START?$CB?6@
	call	_printf
	add	esp, 4

; 65   : 
; 66   : 	unsigned char frame[SIZE] = { 0 };

	xor	eax, eax
	mov	DWORD PTR _frame$[ebp], eax
	mov	DWORD PTR _frame$[ebp+4], eax
	mov	DWORD PTR _frame$[ebp+8], eax
	mov	DWORD PTR _frame$[ebp+12], eax
	mov	DWORD PTR _frame$[ebp+16], eax
	mov	DWORD PTR _frame$[ebp+20], eax
	mov	BYTE PTR _frame$[ebp+24], al

; 67   : 
; 68   : 	for (int row = 0; row < imgHeight; row++)

	mov	DWORD PTR _row$12[ebp], 0
	jmp	SHORT $LN4@median_fil
$LN2@median_fil:
	mov	eax, DWORD PTR _row$12[ebp]
	add	eax, 1
	mov	DWORD PTR _row$12[ebp], eax
$LN4@median_fil:
	mov	eax, DWORD PTR _row$12[ebp]
	cmp	eax, DWORD PTR _imgHeight$[ebp]
	jge	$LN3@median_fil

; 69   : 	{
; 70   : 		int wr_base = row * imgWidth * 3;

	mov	eax, DWORD PTR _row$12[ebp]
	imul	eax, DWORD PTR _imgWidth$[ebp]
	imul	ecx, eax, 3
	mov	DWORD PTR _wr_base$11[ebp], ecx

; 71   : 		int rd_base = row * imgWidthF * 3;

	mov	eax, DWORD PTR _row$12[ebp]
	imul	eax, DWORD PTR _imgWidthF$[ebp]
	imul	ecx, eax, 3
	mov	DWORD PTR _rd_base$10[ebp], ecx

; 72   : 
; 73   : 		for (int col = 0; col < imgWidth; col++)

	mov	DWORD PTR _col$9[ebp], 0
	jmp	SHORT $LN7@median_fil
$LN5@median_fil:
	mov	eax, DWORD PTR _col$9[ebp]
	add	eax, 1
	mov	DWORD PTR _col$9[ebp], eax
$LN7@median_fil:
	mov	eax, DWORD PTR _col$9[ebp]
	cmp	eax, DWORD PTR _imgWidth$[ebp]
	jge	$LN6@median_fil

; 74   : 		{
; 75   : 			printf("PIXEL %dx%d\n", row, col);

	mov	eax, DWORD PTR _col$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _row$12[ebp]
	push	ecx
	push	OFFSET ??_C@_0N@MKGKEFKO@PIXEL?5?$CFdx?$CFd?6@
	call	_printf
	add	esp, 12					; 0000000cH

; 76   : 			int rd_offset = ((FILTER_W-1)/2 + col) * 3;

	mov	eax, DWORD PTR _col$9[ebp]
	add	eax, 2
	imul	ecx, eax, 3
	mov	DWORD PTR _rd_offset$8[ebp], ecx

; 77   : 			short fval[3] = { 0,0,0 };

	xor	eax, eax
	mov	WORD PTR _fval$7[ebp], ax
	xor	eax, eax
	mov	WORD PTR _fval$7[ebp+2], ax
	xor	eax, eax
	mov	WORD PTR _fval$7[ebp+4], ax

; 78   : 
; 79   : 			int pixel_src = rd_base + rd_offset + (FILTER_H-1)/2 * imgWidthF;

	mov	eax, DWORD PTR _rd_base$10[ebp]
	add	eax, DWORD PTR _rd_offset$8[ebp]
	mov	ecx, DWORD PTR _imgWidthF$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _pixel_src$6[ebp], edx

; 80   : 			int filter_src = pixel_src - (FILTER_H - 1) / 2 * imgWidthF;

	mov	eax, DWORD PTR _imgWidthF$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _pixel_src$6[ebp]
	sub	ecx, eax
	mov	DWORD PTR _filter_src$5[ebp], ecx

; 81   : 
; 82   : 			printf("Pixel source: %d\nFilter source:%d\n", pixel_src, filter_src);

	mov	eax, DWORD PTR _filter_src$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pixel_src$6[ebp]
	push	ecx
	push	OFFSET ??_C@_0CD@HPPIJHBK@Pixel?5source?3?5?$CFd?6Filter?5source?3@
	call	_printf
	add	esp, 12					; 0000000cH

; 83   : 
; 84   : 			for (int rgb = 0; rgb < 3; rgb++)

	mov	DWORD PTR _rgb$4[ebp], 0
	jmp	SHORT $LN10@median_fil
$LN8@median_fil:
	mov	eax, DWORD PTR _rgb$4[ebp]
	add	eax, 1
	mov	DWORD PTR _rgb$4[ebp], eax
$LN10@median_fil:
	cmp	DWORD PTR _rgb$4[ebp], 3
	jge	$LN9@median_fil

; 85   : 			{
; 86   : 				for (int fy = 0; fy < FILTER_H; fy++)

	mov	DWORD PTR _fy$3[ebp], 0
	jmp	SHORT $LN13@median_fil
$LN11@median_fil:
	mov	eax, DWORD PTR _fy$3[ebp]
	add	eax, 1
	mov	DWORD PTR _fy$3[ebp], eax
$LN13@median_fil:
	cmp	DWORD PTR _fy$3[ebp], 5
	jge	SHORT $LN12@median_fil

; 87   : 				{
; 88   : 					for (int fx = 0; fx < FILTER_W; fx++)

	mov	DWORD PTR _fx$2[ebp], 0
	jmp	SHORT $LN16@median_fil
$LN14@median_fil:
	mov	eax, DWORD PTR _fx$2[ebp]
	add	eax, 1
	mov	DWORD PTR _fx$2[ebp], eax
$LN16@median_fil:
	cmp	DWORD PTR _fx$2[ebp], 5
	jge	SHORT $LN15@median_fil

; 89   : 					{
; 90   : 						frame[fx * FILTER_W + fy] = imgSrcExt[filter_src + fx * imgWidthF + fy + rgb];

	mov	eax, DWORD PTR _fx$2[ebp]
	imul	eax, DWORD PTR _imgWidthF$[ebp]
	add	eax, DWORD PTR _filter_src$5[ebp]
	add	eax, DWORD PTR _fy$3[ebp]
	add	eax, DWORD PTR _rgb$4[ebp]
	imul	ecx, DWORD PTR _fx$2[ebp], 5
	add	ecx, DWORD PTR _fy$3[ebp]
	mov	edx, DWORD PTR _imgSrcExt$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR _frame$[ebp+ecx], al

; 91   : 					}

	jmp	SHORT $LN14@median_fil
$LN15@median_fil:

; 92   : 				}

	jmp	SHORT $LN11@median_fil
$LN12@median_fil:

; 93   : 
; 94   : 				oddEvenSort(frame, 25);

	push	25					; 00000019H
	lea	eax, DWORD PTR _frame$[ebp]
	push	eax
	call	?oddEvenSort@@YAXPAEH@Z			; oddEvenSort
	add	esp, 8

; 95   : 				fval[rgb] = frame[12];

	mov	eax, 1
	imul	ecx, eax, 12
	movzx	dx, BYTE PTR _frame$[ebp+ecx]
	mov	eax, DWORD PTR _rgb$4[ebp]
	mov	WORD PTR _fval$7[ebp+eax*2], dx

; 96   : 				if (fval[rgb] > 255) fval[rgb] = 255;

	mov	eax, DWORD PTR _rgb$4[ebp]
	movsx	ecx, WORD PTR _fval$7[ebp+eax*2]
	cmp	ecx, 255				; 000000ffH
	jle	SHORT $LN17@median_fil
	mov	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _rgb$4[ebp]
	mov	WORD PTR _fval$7[ebp+ecx*2], ax
$LN17@median_fil:

; 97   : 				if (fval[rgb] < 0)   fval[rgb] = 0;

	mov	eax, DWORD PTR _rgb$4[ebp]
	movsx	ecx, WORD PTR _fval$7[ebp+eax*2]
	test	ecx, ecx
	jge	SHORT $LN18@median_fil
	mov	eax, DWORD PTR _rgb$4[ebp]
	shl	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 6
	jae	SHORT $LN20@median_fil
	jmp	SHORT $LN21@median_fil
$LN20@median_fil:
	call	___report_rangecheckfailure
$LN21@median_fil:
	xor	ecx, ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	WORD PTR _fval$7[ebp+edx], cx
$LN18@median_fil:

; 98   : 				*(imgDst + wr_base + rgb) = (unsigned char)(fval[rgb]);

	mov	eax, DWORD PTR _imgDst$[ebp]
	add	eax, DWORD PTR _wr_base$11[ebp]
	mov	ecx, DWORD PTR _rgb$4[ebp]
	mov	edx, DWORD PTR _rgb$4[ebp]
	mov	dl, BYTE PTR _fval$7[ebp+edx*2]
	mov	BYTE PTR [eax+ecx], dl

; 99   : 
; 100  : 				printf("Pixel src_%d: %d\n", rgb, imgSrcExt[pixel_src+rgb]);

	mov	eax, DWORD PTR _pixel_src$6[ebp]
	add	eax, DWORD PTR _rgb$4[ebp]
	mov	ecx, DWORD PTR _imgSrcExt$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _rgb$4[ebp]
	push	eax
	push	OFFSET ??_C@_0BC@DMDABPEF@Pixel?5src_?$CFd?3?5?$CFd?6@
	call	_printf
	add	esp, 12					; 0000000cH

; 101  : 				printf("Pixel mod_%d: %d\n", rgb, fval[rgb]);

	mov	eax, DWORD PTR _rgb$4[ebp]
	movsx	ecx, WORD PTR _fval$7[ebp+eax*2]
	push	ecx
	mov	edx, DWORD PTR _rgb$4[ebp]
	push	edx
	push	OFFSET ??_C@_0BC@FOKHLDBC@Pixel?5mod_?$CFd?3?5?$CFd?6@
	call	_printf
	add	esp, 12					; 0000000cH

; 102  : 			}

	jmp	$LN8@median_fil
$LN9@median_fil:

; 103  : 	
; 104  : 			wr_base = wr_base + 3;

	mov	eax, DWORD PTR _wr_base$11[ebp]
	add	eax, 3
	mov	DWORD PTR _wr_base$11[ebp], eax

; 105  : 
; 106  : 		}

	jmp	$LN5@median_fil
$LN6@median_fil:

; 107  : 		wr_base = wr_base + 4 * 3;

	mov	eax, DWORD PTR _wr_base$11[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _wr_base$11[ebp], eax

; 108  : 
; 109  : 	}

	jmp	$LN2@median_fil
$LN3@median_fil:

; 110  : 
; 111  : 	printf("MEDIAN STOP!\n");

	push	OFFSET ??_C@_0O@CPHHODDO@MEDIAN?5STOP?$CB?6@
	call	_printf
	add	esp, 4
$LN19@median_fil:

; 112  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@median_fil
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 380				; 0000017cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@median_fil:
	DD	2
	DD	$LN24@median_fil
$LN24@median_fil:
	DD	-36					; ffffffdcH
	DD	25					; 00000019H
	DD	$LN22@median_fil
	DD	-112					; ffffff90H
	DD	6
	DD	$LN23@median_fil
$LN23@median_fil:
	DB	102					; 00000066H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN22@median_fil:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?median_filter@@YAXHHHHPAE0@Z ENDP			; median_filter
_TEXT	ENDS
END
