-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V : IN STD_LOGIC_VECTOR (23 downto 0);
    res_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    res_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fir_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_hw,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70tfbv484-1,HLS_INPUT_CLOCK=100.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.454000,HLS_SYN_LAT=512,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=80,HLS_SYN_LUT=399,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv45_0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv24_7FFFFF : STD_LOGIC_VECTOR (23 downto 0) := "011111111111111111111111";
    constant ap_const_lv24_800000 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tomb_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tomb_V_ce0 : STD_LOGIC;
    signal tomb_V_we0 : STD_LOGIC;
    signal tomb_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal tomb_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal coeff_hw_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal coeff_hw_V_ce0 : STD_LOGIC;
    signal coeff_hw_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_1_fu_193_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_527 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_213_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_227_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_reg_550 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_516_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_reg_152 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Val2_s_reg_164 : STD_LOGIC_VECTOR (44 downto 0);
    signal i1_reg_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_cast_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_267_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_251_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_277_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_287_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_fu_233_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_241_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_307_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_3_fu_311_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal newsignbit_fu_317_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_259_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_345_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_361_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal carry_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_337_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_383_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_403_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_demorgan_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_mux_fu_483_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_5_fu_491_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component fir_hw_mac_muladdbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (44 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component fir_hw_tomb_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component fir_hw_coeff_hw_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    tomb_V_U : component fir_hw_tomb_V
    generic map (
        DataWidth => 24,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tomb_V_address0,
        ce0 => tomb_V_ce0,
        we0 => tomb_V_we0,
        d0 => tomb_V_d0,
        q0 => tomb_V_q0);

    coeff_hw_V_U : component fir_hw_coeff_hw_V
    generic map (
        DataWidth => 15,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coeff_hw_V_address0,
        ce0 => coeff_hw_V_ce0,
        q0 => coeff_hw_V_q0);

    fir_hw_mac_muladdbkb_U1 : component fir_hw_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 24,
        din2_WIDTH => 45,
        dout_WIDTH => 45)
    port map (
        din0 => coeff_hw_V_q0,
        din1 => tomb_V_q0,
        din2 => p_Val2_s_reg_164,
        dout => grp_fu_516_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i1_reg_176 <= i_2_reg_550;
            elsif (((tmp_2_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_176 <= ap_const_lv8_7F;
            end if; 
        end if;
    end process;

    i_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_152 <= i_1_reg_527;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_152 <= ap_const_lv7_7F;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_s_reg_164 <= grp_fu_516_p3;
            elsif (((tmp_2_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_s_reg_164 <= ap_const_lv45_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_1_reg_527 <= i_1_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_213_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                i_2_reg_550 <= i_2_fu_227_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_2_fu_187_p2, ap_CS_fsm_state4, tmp_fu_213_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_2_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((tmp_fu_213_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    Range1_all_ones_fu_371_p2 <= "1" when (tmp_11_fu_361_p4 = ap_const_lv4_F) else "0";
    Range1_all_zeros_fu_377_p2 <= "1" when (tmp_11_fu_361_p4 = ap_const_lv4_0) else "0";
    Range2_all_ones_fu_355_p2 <= "1" when (tmp_10_fu_345_p4 = ap_const_lv3_7) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state4, tmp_fu_213_p3)
    begin
        if (((tmp_fu_213_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, tmp_fu_213_p3)
    begin
        if (((tmp_fu_213_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_441_p2 <= (newsignbit_fu_317_p3 and deleted_ones_fu_403_p3);
    brmerge_i_fu_423_p2 <= (p_not_i_fu_417_p2 or newsignbit_fu_317_p3);
    brmerge_i_i_fu_465_p2 <= (underflow_fu_459_p2 or overflow_fu_435_p2);
    carry_fu_331_p2 <= (tmp_6_fu_325_p2 and tmp_17_fu_259_p3);
    coeff_hw_V_address0 <= tmp_7_fu_221_p1(7 - 1 downto 0);

    coeff_hw_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            coeff_hw_V_ce0 <= ap_const_logic_1;
        else 
            coeff_hw_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    deleted_ones_fu_403_p3 <= 
        p_41_i_fu_397_p2 when (carry_fu_331_p2(0) = '1') else 
        Range1_all_ones_fu_371_p2;
    deleted_zeros_fu_383_p3 <= 
        Range1_all_ones_fu_371_p2 when (carry_fu_331_p2(0) = '1') else 
        Range1_all_zeros_fu_377_p2;
        i1_cast_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i1_reg_176),32));

    i_1_fu_193_p2 <= std_logic_vector(unsigned(i_reg_152) + unsigned(ap_const_lv7_7F));
    i_2_fu_227_p2 <= std_logic_vector(signed(i1_reg_176) + signed(ap_const_lv8_FF));
    newsignbit_fu_317_p3 <= p_Val2_3_fu_311_p2(23 downto 23);
    overflow_fu_435_p2 <= (tmp_13_fu_429_p2 and brmerge_i_fu_423_p2);
    p_38_i_fu_411_p2 <= (carry_fu_331_p2 and Range1_all_ones_fu_371_p2);
    p_41_i_fu_397_p2 <= (tmp_12_fu_391_p2 and Range2_all_ones_fu_355_p2);
    p_Val2_2_fu_241_p4 <= p_Val2_s_reg_164(40 downto 17);
    p_Val2_3_fu_311_p2 <= std_logic_vector(unsigned(p_Val2_2_fu_241_p4) + unsigned(tmp_4_fu_307_p1));
    p_Val2_5_fu_491_p3 <= 
        ap_const_lv24_800000 when (underflow_fu_459_p2(0) = '1') else 
        p_Val2_3_fu_311_p2;
    p_Val2_5_mux_fu_483_p3 <= 
        ap_const_lv24_7FFFFF when (brmerge_i_i_fu_465_p2(0) = '1') else 
        p_Val2_3_fu_311_p2;
    p_not_i_fu_417_p2 <= (deleted_zeros_fu_383_p3 xor ap_const_lv1_1);
    qb_assign_fu_301_p2 <= (tmp_s_fu_295_p2 and signbit_fu_233_p3);
    res_V <= 
        p_Val2_5_mux_fu_483_p3 when (underflow_not_fu_477_p2(0) = '1') else 
        p_Val2_5_fu_491_p3;

    res_V_ap_vld_assign_proc : process(ap_CS_fsm_state4, tmp_fu_213_p3)
    begin
        if (((tmp_fu_213_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            res_V_ap_vld <= ap_const_logic_1;
        else 
            res_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    signbit_fu_233_p3 <= p_Val2_s_reg_164(44 downto 44);
    tmp1_demorgan_fu_447_p2 <= (p_38_i_fu_411_p2 or brmerge40_demorgan_i_fu_441_p2);
    tmp1_fu_453_p2 <= (tmp1_demorgan_fu_447_p2 xor ap_const_lv1_1);
    tmp2_fu_471_p2 <= (tmp_13_fu_429_p2 or brmerge40_demorgan_i_fu_441_p2);
    tmp_10_fu_345_p4 <= p_Val2_s_reg_164(44 downto 42);
    tmp_11_fu_361_p4 <= p_Val2_s_reg_164(44 downto 41);
    tmp_12_fu_391_p2 <= (tmp_20_fu_337_p3 xor ap_const_lv1_1);
    tmp_13_fu_429_p2 <= (signbit_fu_233_p3 xor ap_const_lv1_1);
    tmp_16_fu_251_p3 <= p_Val2_s_reg_164(16 downto 16);
    tmp_17_fu_259_p3 <= p_Val2_s_reg_164(40 downto 40);
    tmp_18_fu_267_p1 <= p_Val2_s_reg_164(1 - 1 downto 0);
    tmp_1_fu_271_p2 <= (tmp_18_fu_267_p1 or tmp_16_fu_251_p3);
    tmp_20_fu_337_p3 <= p_Val2_s_reg_164(41 downto 41);
    tmp_2_fu_187_p2 <= "1" when (i_reg_152 = ap_const_lv7_0) else "0";
    tmp_3_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_152),64));
    tmp_4_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_fu_301_p2),24));
    tmp_5_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_193_p2),64));
    tmp_6_fu_325_p2 <= (newsignbit_fu_317_p3 xor ap_const_lv1_1);
    tmp_7_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_cast_fu_209_p1),64));
    tmp_8_fu_277_p4 <= p_Val2_s_reg_164(15 downto 1);
    tmp_9_fu_287_p3 <= (tmp_8_fu_277_p4 & tmp_1_fu_271_p2);
    tmp_fu_213_p3 <= i1_reg_176(7 downto 7);
    tmp_s_fu_295_p2 <= "0" when (tmp_9_fu_287_p3 = ap_const_lv16_0) else "1";

    tomb_V_address0_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_187_p2, ap_CS_fsm_state4, ap_CS_fsm_state3, tmp_5_fu_199_p1, tmp_3_fu_204_p1, tmp_7_fu_221_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tomb_V_address0 <= tmp_7_fu_221_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tomb_V_address0 <= tmp_3_fu_204_p1(7 - 1 downto 0);
        elsif (((tmp_2_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tomb_V_address0 <= ap_const_lv7_0;
        elsif (((tmp_2_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tomb_V_address0 <= tmp_5_fu_199_p1(7 - 1 downto 0);
        else 
            tomb_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    tomb_V_ce0_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_187_p2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_2_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_2_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            tomb_V_ce0 <= ap_const_logic_1;
        else 
            tomb_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tomb_V_d0_assign_proc : process(input_V, tomb_V_q0, ap_CS_fsm_state2, tmp_2_fu_187_p2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tomb_V_d0 <= tomb_V_q0;
        elsif (((tmp_2_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tomb_V_d0 <= input_V;
        else 
            tomb_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tomb_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_187_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_2_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            tomb_V_we0 <= ap_const_logic_1;
        else 
            tomb_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    underflow_fu_459_p2 <= (tmp1_fu_453_p2 and signbit_fu_233_p3);
    underflow_not_fu_477_p2 <= (tmp2_fu_471_p2 or p_38_i_fu_411_p2);
end behav;
