// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir_hw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir_hw::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir_hw::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> fir_hw::ap_ST_fsm_state1 = "1";
const sc_lv<5> fir_hw::ap_ST_fsm_state2 = "10";
const sc_lv<5> fir_hw::ap_ST_fsm_state3 = "100";
const sc_lv<5> fir_hw::ap_ST_fsm_state4 = "1000";
const sc_lv<5> fir_hw::ap_ST_fsm_state5 = "10000";
const sc_lv<32> fir_hw::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fir_hw::ap_const_lv32_1 = "1";
const sc_lv<1> fir_hw::ap_const_lv1_0 = "0";
const sc_lv<32> fir_hw::ap_const_lv32_3 = "11";
const sc_lv<32> fir_hw::ap_const_lv32_4 = "100";
const sc_lv<7> fir_hw::ap_const_lv7_7F = "1111111";
const sc_lv<32> fir_hw::ap_const_lv32_2 = "10";
const sc_lv<45> fir_hw::ap_const_lv45_0 = "000000000000000000000000000000000000000000000";
const sc_lv<1> fir_hw::ap_const_lv1_1 = "1";
const sc_lv<8> fir_hw::ap_const_lv8_7F = "1111111";
const sc_lv<7> fir_hw::ap_const_lv7_0 = "0000000";
const sc_lv<32> fir_hw::ap_const_lv32_7 = "111";
const sc_lv<8> fir_hw::ap_const_lv8_FF = "11111111";
const sc_lv<32> fir_hw::ap_const_lv32_2C = "101100";
const sc_lv<32> fir_hw::ap_const_lv32_11 = "10001";
const sc_lv<32> fir_hw::ap_const_lv32_28 = "101000";
const sc_lv<32> fir_hw::ap_const_lv32_10 = "10000";
const sc_lv<32> fir_hw::ap_const_lv32_F = "1111";
const sc_lv<16> fir_hw::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> fir_hw::ap_const_lv32_17 = "10111";
const sc_lv<32> fir_hw::ap_const_lv32_29 = "101001";
const sc_lv<32> fir_hw::ap_const_lv32_2A = "101010";
const sc_lv<3> fir_hw::ap_const_lv3_7 = "111";
const sc_lv<4> fir_hw::ap_const_lv4_F = "1111";
const sc_lv<4> fir_hw::ap_const_lv4_0 = "0000";
const sc_lv<24> fir_hw::ap_const_lv24_7FFFFF = "11111111111111111111111";
const sc_lv<24> fir_hw::ap_const_lv24_800000 = "100000000000000000000000";
const bool fir_hw::ap_const_boolean_1 = true;

fir_hw::fir_hw(sc_module_name name) : sc_module(name), mVcdFile(0) {
    tomb_V_U = new fir_hw_tomb_V("tomb_V_U");
    tomb_V_U->clk(ap_clk);
    tomb_V_U->reset(ap_rst);
    tomb_V_U->address0(tomb_V_address0);
    tomb_V_U->ce0(tomb_V_ce0);
    tomb_V_U->we0(tomb_V_we0);
    tomb_V_U->d0(tomb_V_d0);
    tomb_V_U->q0(tomb_V_q0);
    coeff_hw_V_U = new fir_hw_coeff_hw_V("coeff_hw_V_U");
    coeff_hw_V_U->clk(ap_clk);
    coeff_hw_V_U->reset(ap_rst);
    coeff_hw_V_U->address0(coeff_hw_V_address0);
    coeff_hw_V_U->ce0(coeff_hw_V_ce0);
    coeff_hw_V_U->q0(coeff_hw_V_q0);
    fir_hw_mac_muladdbkb_U1 = new fir_hw_mac_muladdbkb<1,1,15,24,45,45>("fir_hw_mac_muladdbkb_U1");
    fir_hw_mac_muladdbkb_U1->din0(coeff_hw_V_q0);
    fir_hw_mac_muladdbkb_U1->din1(tomb_V_q0);
    fir_hw_mac_muladdbkb_U1->din2(p_Val2_s_reg_164);
    fir_hw_mac_muladdbkb_U1->dout(grp_fu_516_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Range1_all_ones_fu_371_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_213_p3 );
    sensitive << ( tmp_11_fu_361_p4 );

    SC_METHOD(thread_Range1_all_zeros_fu_377_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_213_p3 );
    sensitive << ( tmp_11_fu_361_p4 );

    SC_METHOD(thread_Range2_all_ones_fu_355_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_213_p3 );
    sensitive << ( tmp_10_fu_345_p4 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_213_p3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_213_p3 );

    SC_METHOD(thread_brmerge40_demorgan_i_fu_441_p2);
    sensitive << ( newsignbit_fu_317_p3 );
    sensitive << ( deleted_ones_fu_403_p3 );

    SC_METHOD(thread_brmerge_i_fu_423_p2);
    sensitive << ( newsignbit_fu_317_p3 );
    sensitive << ( p_not_i_fu_417_p2 );

    SC_METHOD(thread_brmerge_i_i_fu_465_p2);
    sensitive << ( underflow_fu_459_p2 );
    sensitive << ( overflow_fu_435_p2 );

    SC_METHOD(thread_carry_fu_331_p2);
    sensitive << ( tmp_17_fu_259_p3 );
    sensitive << ( tmp_6_fu_325_p2 );

    SC_METHOD(thread_coeff_hw_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_221_p1 );

    SC_METHOD(thread_coeff_hw_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_deleted_ones_fu_403_p3);
    sensitive << ( carry_fu_331_p2 );
    sensitive << ( Range1_all_ones_fu_371_p2 );
    sensitive << ( p_41_i_fu_397_p2 );

    SC_METHOD(thread_deleted_zeros_fu_383_p3);
    sensitive << ( carry_fu_331_p2 );
    sensitive << ( Range1_all_ones_fu_371_p2 );
    sensitive << ( Range1_all_zeros_fu_377_p2 );

    SC_METHOD(thread_i1_cast_fu_209_p1);
    sensitive << ( i1_reg_176 );

    SC_METHOD(thread_i_1_fu_193_p2);
    sensitive << ( i_reg_152 );

    SC_METHOD(thread_i_2_fu_227_p2);
    sensitive << ( i1_reg_176 );

    SC_METHOD(thread_newsignbit_fu_317_p3);
    sensitive << ( p_Val2_3_fu_311_p2 );

    SC_METHOD(thread_overflow_fu_435_p2);
    sensitive << ( brmerge_i_fu_423_p2 );
    sensitive << ( tmp_13_fu_429_p2 );

    SC_METHOD(thread_p_38_i_fu_411_p2);
    sensitive << ( carry_fu_331_p2 );
    sensitive << ( Range1_all_ones_fu_371_p2 );

    SC_METHOD(thread_p_41_i_fu_397_p2);
    sensitive << ( Range2_all_ones_fu_355_p2 );
    sensitive << ( tmp_12_fu_391_p2 );

    SC_METHOD(thread_p_Val2_2_fu_241_p4);
    sensitive << ( p_Val2_s_reg_164 );

    SC_METHOD(thread_p_Val2_3_fu_311_p2);
    sensitive << ( p_Val2_2_fu_241_p4 );
    sensitive << ( tmp_4_fu_307_p1 );

    SC_METHOD(thread_p_Val2_5_fu_491_p3);
    sensitive << ( p_Val2_3_fu_311_p2 );
    sensitive << ( underflow_fu_459_p2 );

    SC_METHOD(thread_p_Val2_5_mux_fu_483_p3);
    sensitive << ( p_Val2_3_fu_311_p2 );
    sensitive << ( brmerge_i_i_fu_465_p2 );

    SC_METHOD(thread_p_not_i_fu_417_p2);
    sensitive << ( deleted_zeros_fu_383_p3 );

    SC_METHOD(thread_qb_assign_fu_301_p2);
    sensitive << ( tmp_s_fu_295_p2 );
    sensitive << ( signbit_fu_233_p3 );

    SC_METHOD(thread_res_V);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_213_p3 );
    sensitive << ( underflow_not_fu_477_p2 );
    sensitive << ( p_Val2_5_mux_fu_483_p3 );
    sensitive << ( p_Val2_5_fu_491_p3 );

    SC_METHOD(thread_res_V_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_213_p3 );

    SC_METHOD(thread_signbit_fu_233_p3);
    sensitive << ( p_Val2_s_reg_164 );

    SC_METHOD(thread_tmp1_demorgan_fu_447_p2);
    sensitive << ( p_38_i_fu_411_p2 );
    sensitive << ( brmerge40_demorgan_i_fu_441_p2 );

    SC_METHOD(thread_tmp1_fu_453_p2);
    sensitive << ( tmp1_demorgan_fu_447_p2 );

    SC_METHOD(thread_tmp2_fu_471_p2);
    sensitive << ( tmp_13_fu_429_p2 );
    sensitive << ( brmerge40_demorgan_i_fu_441_p2 );

    SC_METHOD(thread_tmp_10_fu_345_p4);
    sensitive << ( p_Val2_s_reg_164 );

    SC_METHOD(thread_tmp_11_fu_361_p4);
    sensitive << ( p_Val2_s_reg_164 );

    SC_METHOD(thread_tmp_12_fu_391_p2);
    sensitive << ( tmp_20_fu_337_p3 );

    SC_METHOD(thread_tmp_13_fu_429_p2);
    sensitive << ( signbit_fu_233_p3 );

    SC_METHOD(thread_tmp_16_fu_251_p3);
    sensitive << ( p_Val2_s_reg_164 );

    SC_METHOD(thread_tmp_17_fu_259_p3);
    sensitive << ( p_Val2_s_reg_164 );

    SC_METHOD(thread_tmp_18_fu_267_p1);
    sensitive << ( p_Val2_s_reg_164 );

    SC_METHOD(thread_tmp_1_fu_271_p2);
    sensitive << ( tmp_18_fu_267_p1 );
    sensitive << ( tmp_16_fu_251_p3 );

    SC_METHOD(thread_tmp_20_fu_337_p3);
    sensitive << ( p_Val2_s_reg_164 );

    SC_METHOD(thread_tmp_2_fu_187_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_152 );

    SC_METHOD(thread_tmp_3_fu_204_p1);
    sensitive << ( i_reg_152 );

    SC_METHOD(thread_tmp_4_fu_307_p1);
    sensitive << ( qb_assign_fu_301_p2 );

    SC_METHOD(thread_tmp_5_fu_199_p1);
    sensitive << ( i_1_fu_193_p2 );

    SC_METHOD(thread_tmp_6_fu_325_p2);
    sensitive << ( newsignbit_fu_317_p3 );

    SC_METHOD(thread_tmp_7_fu_221_p1);
    sensitive << ( i1_cast_fu_209_p1 );

    SC_METHOD(thread_tmp_8_fu_277_p4);
    sensitive << ( p_Val2_s_reg_164 );

    SC_METHOD(thread_tmp_9_fu_287_p3);
    sensitive << ( tmp_8_fu_277_p4 );
    sensitive << ( tmp_1_fu_271_p2 );

    SC_METHOD(thread_tmp_fu_213_p3);
    sensitive << ( i1_reg_176 );

    SC_METHOD(thread_tmp_s_fu_295_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_213_p3 );
    sensitive << ( tmp_9_fu_287_p3 );

    SC_METHOD(thread_tomb_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_fu_187_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_199_p1 );
    sensitive << ( tmp_3_fu_204_p1 );
    sensitive << ( tmp_7_fu_221_p1 );

    SC_METHOD(thread_tomb_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_fu_187_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tomb_V_d0);
    sensitive << ( input_V );
    sensitive << ( tomb_V_q0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_fu_187_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tomb_V_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_fu_187_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_underflow_fu_459_p2);
    sensitive << ( signbit_fu_233_p3 );
    sensitive << ( tmp1_fu_453_p2 );

    SC_METHOD(thread_underflow_not_fu_477_p2);
    sensitive << ( p_38_i_fu_411_p2 );
    sensitive << ( tmp2_fu_471_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_fu_187_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_213_p3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_hw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_V, "(port)input_V");
    sc_trace(mVcdFile, res_V, "(port)res_V");
    sc_trace(mVcdFile, res_V_ap_vld, "(port)res_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tomb_V_address0, "tomb_V_address0");
    sc_trace(mVcdFile, tomb_V_ce0, "tomb_V_ce0");
    sc_trace(mVcdFile, tomb_V_we0, "tomb_V_we0");
    sc_trace(mVcdFile, tomb_V_d0, "tomb_V_d0");
    sc_trace(mVcdFile, tomb_V_q0, "tomb_V_q0");
    sc_trace(mVcdFile, coeff_hw_V_address0, "coeff_hw_V_address0");
    sc_trace(mVcdFile, coeff_hw_V_ce0, "coeff_hw_V_ce0");
    sc_trace(mVcdFile, coeff_hw_V_q0, "coeff_hw_V_q0");
    sc_trace(mVcdFile, i_1_fu_193_p2, "i_1_fu_193_p2");
    sc_trace(mVcdFile, i_1_reg_527, "i_1_reg_527");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_2_fu_187_p2, "tmp_2_fu_187_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_fu_213_p3, "tmp_fu_213_p3");
    sc_trace(mVcdFile, i_2_fu_227_p2, "i_2_fu_227_p2");
    sc_trace(mVcdFile, i_2_reg_550, "i_2_reg_550");
    sc_trace(mVcdFile, grp_fu_516_p3, "grp_fu_516_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_reg_152, "i_reg_152");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, p_Val2_s_reg_164, "p_Val2_s_reg_164");
    sc_trace(mVcdFile, i1_reg_176, "i1_reg_176");
    sc_trace(mVcdFile, tmp_5_fu_199_p1, "tmp_5_fu_199_p1");
    sc_trace(mVcdFile, tmp_3_fu_204_p1, "tmp_3_fu_204_p1");
    sc_trace(mVcdFile, tmp_7_fu_221_p1, "tmp_7_fu_221_p1");
    sc_trace(mVcdFile, i1_cast_fu_209_p1, "i1_cast_fu_209_p1");
    sc_trace(mVcdFile, tmp_18_fu_267_p1, "tmp_18_fu_267_p1");
    sc_trace(mVcdFile, tmp_16_fu_251_p3, "tmp_16_fu_251_p3");
    sc_trace(mVcdFile, tmp_8_fu_277_p4, "tmp_8_fu_277_p4");
    sc_trace(mVcdFile, tmp_1_fu_271_p2, "tmp_1_fu_271_p2");
    sc_trace(mVcdFile, tmp_9_fu_287_p3, "tmp_9_fu_287_p3");
    sc_trace(mVcdFile, tmp_s_fu_295_p2, "tmp_s_fu_295_p2");
    sc_trace(mVcdFile, signbit_fu_233_p3, "signbit_fu_233_p3");
    sc_trace(mVcdFile, qb_assign_fu_301_p2, "qb_assign_fu_301_p2");
    sc_trace(mVcdFile, p_Val2_2_fu_241_p4, "p_Val2_2_fu_241_p4");
    sc_trace(mVcdFile, tmp_4_fu_307_p1, "tmp_4_fu_307_p1");
    sc_trace(mVcdFile, p_Val2_3_fu_311_p2, "p_Val2_3_fu_311_p2");
    sc_trace(mVcdFile, newsignbit_fu_317_p3, "newsignbit_fu_317_p3");
    sc_trace(mVcdFile, tmp_17_fu_259_p3, "tmp_17_fu_259_p3");
    sc_trace(mVcdFile, tmp_6_fu_325_p2, "tmp_6_fu_325_p2");
    sc_trace(mVcdFile, tmp_10_fu_345_p4, "tmp_10_fu_345_p4");
    sc_trace(mVcdFile, tmp_11_fu_361_p4, "tmp_11_fu_361_p4");
    sc_trace(mVcdFile, carry_fu_331_p2, "carry_fu_331_p2");
    sc_trace(mVcdFile, Range1_all_ones_fu_371_p2, "Range1_all_ones_fu_371_p2");
    sc_trace(mVcdFile, Range1_all_zeros_fu_377_p2, "Range1_all_zeros_fu_377_p2");
    sc_trace(mVcdFile, tmp_20_fu_337_p3, "tmp_20_fu_337_p3");
    sc_trace(mVcdFile, Range2_all_ones_fu_355_p2, "Range2_all_ones_fu_355_p2");
    sc_trace(mVcdFile, tmp_12_fu_391_p2, "tmp_12_fu_391_p2");
    sc_trace(mVcdFile, p_41_i_fu_397_p2, "p_41_i_fu_397_p2");
    sc_trace(mVcdFile, deleted_zeros_fu_383_p3, "deleted_zeros_fu_383_p3");
    sc_trace(mVcdFile, p_not_i_fu_417_p2, "p_not_i_fu_417_p2");
    sc_trace(mVcdFile, brmerge_i_fu_423_p2, "brmerge_i_fu_423_p2");
    sc_trace(mVcdFile, tmp_13_fu_429_p2, "tmp_13_fu_429_p2");
    sc_trace(mVcdFile, deleted_ones_fu_403_p3, "deleted_ones_fu_403_p3");
    sc_trace(mVcdFile, p_38_i_fu_411_p2, "p_38_i_fu_411_p2");
    sc_trace(mVcdFile, brmerge40_demorgan_i_fu_441_p2, "brmerge40_demorgan_i_fu_441_p2");
    sc_trace(mVcdFile, tmp1_demorgan_fu_447_p2, "tmp1_demorgan_fu_447_p2");
    sc_trace(mVcdFile, tmp1_fu_453_p2, "tmp1_fu_453_p2");
    sc_trace(mVcdFile, underflow_fu_459_p2, "underflow_fu_459_p2");
    sc_trace(mVcdFile, overflow_fu_435_p2, "overflow_fu_435_p2");
    sc_trace(mVcdFile, tmp2_fu_471_p2, "tmp2_fu_471_p2");
    sc_trace(mVcdFile, brmerge_i_i_fu_465_p2, "brmerge_i_i_fu_465_p2");
    sc_trace(mVcdFile, underflow_not_fu_477_p2, "underflow_not_fu_477_p2");
    sc_trace(mVcdFile, p_Val2_5_mux_fu_483_p3, "p_Val2_5_mux_fu_483_p3");
    sc_trace(mVcdFile, p_Val2_5_fu_491_p3, "p_Val2_5_fu_491_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fir_hw.hdltvin.dat");
    mHdltvoutHandle.open("fir_hw.hdltvout.dat");
}

fir_hw::~fir_hw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete tomb_V_U;
    delete coeff_hw_V_U;
    delete fir_hw_mac_muladdbkb_U1;
}

void fir_hw::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i1_reg_176 = i_2_reg_550.read();
    } else if ((esl_seteq<1,1,1>(tmp_2_fu_187_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        i1_reg_176 = ap_const_lv8_7F;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_152 = i_1_reg_527.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_152 = ap_const_lv7_7F;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        p_Val2_s_reg_164 = grp_fu_516_p3.read();
    } else if ((esl_seteq<1,1,1>(tmp_2_fu_187_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        p_Val2_s_reg_164 = ap_const_lv45_0;
    }
    if ((esl_seteq<1,1,1>(tmp_2_fu_187_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        i_1_reg_527 = i_1_fu_193_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_fu_213_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        i_2_reg_550 = i_2_fu_227_p2.read();
    }
}

void fir_hw::thread_Range1_all_ones_fu_371_p2() {
    Range1_all_ones_fu_371_p2 = (!tmp_11_fu_361_p4.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<1>(): sc_lv<1>(tmp_11_fu_361_p4.read() == ap_const_lv4_F);
}

void fir_hw::thread_Range1_all_zeros_fu_377_p2() {
    Range1_all_zeros_fu_377_p2 = (!tmp_11_fu_361_p4.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_11_fu_361_p4.read() == ap_const_lv4_0);
}

void fir_hw::thread_Range2_all_ones_fu_355_p2() {
    Range2_all_ones_fu_355_p2 = (!tmp_10_fu_345_p4.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(tmp_10_fu_345_p4.read() == ap_const_lv3_7);
}

void fir_hw::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fir_hw::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fir_hw::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fir_hw::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fir_hw::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fir_hw::thread_ap_done() {
    if ((esl_seteq<1,1,1>(tmp_fu_213_p3.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir_hw::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir_hw::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(tmp_fu_213_p3.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir_hw::thread_brmerge40_demorgan_i_fu_441_p2() {
    brmerge40_demorgan_i_fu_441_p2 = (newsignbit_fu_317_p3.read() & deleted_ones_fu_403_p3.read());
}

void fir_hw::thread_brmerge_i_fu_423_p2() {
    brmerge_i_fu_423_p2 = (newsignbit_fu_317_p3.read() | p_not_i_fu_417_p2.read());
}

void fir_hw::thread_brmerge_i_i_fu_465_p2() {
    brmerge_i_i_fu_465_p2 = (underflow_fu_459_p2.read() | overflow_fu_435_p2.read());
}

void fir_hw::thread_carry_fu_331_p2() {
    carry_fu_331_p2 = (tmp_17_fu_259_p3.read() & tmp_6_fu_325_p2.read());
}

void fir_hw::thread_coeff_hw_V_address0() {
    coeff_hw_V_address0 =  (sc_lv<7>) (tmp_7_fu_221_p1.read());
}

void fir_hw::thread_coeff_hw_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        coeff_hw_V_ce0 = ap_const_logic_1;
    } else {
        coeff_hw_V_ce0 = ap_const_logic_0;
    }
}

void fir_hw::thread_deleted_ones_fu_403_p3() {
    deleted_ones_fu_403_p3 = (!carry_fu_331_p2.read()[0].is_01())? sc_lv<1>(): ((carry_fu_331_p2.read()[0].to_bool())? p_41_i_fu_397_p2.read(): Range1_all_ones_fu_371_p2.read());
}

void fir_hw::thread_deleted_zeros_fu_383_p3() {
    deleted_zeros_fu_383_p3 = (!carry_fu_331_p2.read()[0].is_01())? sc_lv<1>(): ((carry_fu_331_p2.read()[0].to_bool())? Range1_all_ones_fu_371_p2.read(): Range1_all_zeros_fu_377_p2.read());
}

void fir_hw::thread_i1_cast_fu_209_p1() {
    i1_cast_fu_209_p1 = esl_sext<32,8>(i1_reg_176.read());
}

void fir_hw::thread_i_1_fu_193_p2() {
    i_1_fu_193_p2 = (!i_reg_152.read().is_01() || !ap_const_lv7_7F.is_01())? sc_lv<7>(): (sc_biguint<7>(i_reg_152.read()) + sc_bigint<7>(ap_const_lv7_7F));
}

void fir_hw::thread_i_2_fu_227_p2() {
    i_2_fu_227_p2 = (!i1_reg_176.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<8>(): (sc_bigint<8>(i1_reg_176.read()) + sc_bigint<8>(ap_const_lv8_FF));
}

void fir_hw::thread_newsignbit_fu_317_p3() {
    newsignbit_fu_317_p3 = p_Val2_3_fu_311_p2.read().range(23, 23);
}

void fir_hw::thread_overflow_fu_435_p2() {
    overflow_fu_435_p2 = (brmerge_i_fu_423_p2.read() & tmp_13_fu_429_p2.read());
}

void fir_hw::thread_p_38_i_fu_411_p2() {
    p_38_i_fu_411_p2 = (carry_fu_331_p2.read() & Range1_all_ones_fu_371_p2.read());
}

void fir_hw::thread_p_41_i_fu_397_p2() {
    p_41_i_fu_397_p2 = (Range2_all_ones_fu_355_p2.read() & tmp_12_fu_391_p2.read());
}

void fir_hw::thread_p_Val2_2_fu_241_p4() {
    p_Val2_2_fu_241_p4 = p_Val2_s_reg_164.read().range(40, 17);
}

void fir_hw::thread_p_Val2_3_fu_311_p2() {
    p_Val2_3_fu_311_p2 = (!p_Val2_2_fu_241_p4.read().is_01() || !tmp_4_fu_307_p1.read().is_01())? sc_lv<24>(): (sc_biguint<24>(p_Val2_2_fu_241_p4.read()) + sc_biguint<24>(tmp_4_fu_307_p1.read()));
}

void fir_hw::thread_p_Val2_5_fu_491_p3() {
    p_Val2_5_fu_491_p3 = (!underflow_fu_459_p2.read()[0].is_01())? sc_lv<24>(): ((underflow_fu_459_p2.read()[0].to_bool())? ap_const_lv24_800000: p_Val2_3_fu_311_p2.read());
}

void fir_hw::thread_p_Val2_5_mux_fu_483_p3() {
    p_Val2_5_mux_fu_483_p3 = (!brmerge_i_i_fu_465_p2.read()[0].is_01())? sc_lv<24>(): ((brmerge_i_i_fu_465_p2.read()[0].to_bool())? ap_const_lv24_7FFFFF: p_Val2_3_fu_311_p2.read());
}

void fir_hw::thread_p_not_i_fu_417_p2() {
    p_not_i_fu_417_p2 = (deleted_zeros_fu_383_p3.read() ^ ap_const_lv1_1);
}

void fir_hw::thread_qb_assign_fu_301_p2() {
    qb_assign_fu_301_p2 = (tmp_s_fu_295_p2.read() & signbit_fu_233_p3.read());
}

void fir_hw::thread_res_V() {
    res_V = (!underflow_not_fu_477_p2.read()[0].is_01())? sc_lv<24>(): ((underflow_not_fu_477_p2.read()[0].to_bool())? p_Val2_5_mux_fu_483_p3.read(): p_Val2_5_fu_491_p3.read());
}

void fir_hw::thread_res_V_ap_vld() {
    if ((esl_seteq<1,1,1>(tmp_fu_213_p3.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        res_V_ap_vld = ap_const_logic_1;
    } else {
        res_V_ap_vld = ap_const_logic_0;
    }
}

void fir_hw::thread_signbit_fu_233_p3() {
    signbit_fu_233_p3 = p_Val2_s_reg_164.read().range(44, 44);
}

void fir_hw::thread_tmp1_demorgan_fu_447_p2() {
    tmp1_demorgan_fu_447_p2 = (p_38_i_fu_411_p2.read() | brmerge40_demorgan_i_fu_441_p2.read());
}

void fir_hw::thread_tmp1_fu_453_p2() {
    tmp1_fu_453_p2 = (tmp1_demorgan_fu_447_p2.read() ^ ap_const_lv1_1);
}

void fir_hw::thread_tmp2_fu_471_p2() {
    tmp2_fu_471_p2 = (brmerge40_demorgan_i_fu_441_p2.read() | tmp_13_fu_429_p2.read());
}

void fir_hw::thread_tmp_10_fu_345_p4() {
    tmp_10_fu_345_p4 = p_Val2_s_reg_164.read().range(44, 42);
}

void fir_hw::thread_tmp_11_fu_361_p4() {
    tmp_11_fu_361_p4 = p_Val2_s_reg_164.read().range(44, 41);
}

void fir_hw::thread_tmp_12_fu_391_p2() {
    tmp_12_fu_391_p2 = (tmp_20_fu_337_p3.read() ^ ap_const_lv1_1);
}

void fir_hw::thread_tmp_13_fu_429_p2() {
    tmp_13_fu_429_p2 = (signbit_fu_233_p3.read() ^ ap_const_lv1_1);
}

void fir_hw::thread_tmp_16_fu_251_p3() {
    tmp_16_fu_251_p3 = p_Val2_s_reg_164.read().range(16, 16);
}

void fir_hw::thread_tmp_17_fu_259_p3() {
    tmp_17_fu_259_p3 = p_Val2_s_reg_164.read().range(40, 40);
}

void fir_hw::thread_tmp_18_fu_267_p1() {
    tmp_18_fu_267_p1 = p_Val2_s_reg_164.read().range(1-1, 0);
}

void fir_hw::thread_tmp_1_fu_271_p2() {
    tmp_1_fu_271_p2 = (tmp_18_fu_267_p1.read() | tmp_16_fu_251_p3.read());
}

void fir_hw::thread_tmp_20_fu_337_p3() {
    tmp_20_fu_337_p3 = p_Val2_s_reg_164.read().range(41, 41);
}

void fir_hw::thread_tmp_2_fu_187_p2() {
    tmp_2_fu_187_p2 = (!i_reg_152.read().is_01() || !ap_const_lv7_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_152.read() == ap_const_lv7_0);
}

void fir_hw::thread_tmp_3_fu_204_p1() {
    tmp_3_fu_204_p1 = esl_zext<64,7>(i_reg_152.read());
}

void fir_hw::thread_tmp_4_fu_307_p1() {
    tmp_4_fu_307_p1 = esl_zext<24,1>(qb_assign_fu_301_p2.read());
}

void fir_hw::thread_tmp_5_fu_199_p1() {
    tmp_5_fu_199_p1 = esl_zext<64,7>(i_1_fu_193_p2.read());
}

void fir_hw::thread_tmp_6_fu_325_p2() {
    tmp_6_fu_325_p2 = (newsignbit_fu_317_p3.read() ^ ap_const_lv1_1);
}

void fir_hw::thread_tmp_7_fu_221_p1() {
    tmp_7_fu_221_p1 = esl_zext<64,32>(i1_cast_fu_209_p1.read());
}

void fir_hw::thread_tmp_8_fu_277_p4() {
    tmp_8_fu_277_p4 = p_Val2_s_reg_164.read().range(15, 1);
}

void fir_hw::thread_tmp_9_fu_287_p3() {
    tmp_9_fu_287_p3 = esl_concat<15,1>(tmp_8_fu_277_p4.read(), tmp_1_fu_271_p2.read());
}

void fir_hw::thread_tmp_fu_213_p3() {
    tmp_fu_213_p3 = i1_reg_176.read().range(7, 7);
}

void fir_hw::thread_tmp_s_fu_295_p2() {
    tmp_s_fu_295_p2 = (!tmp_9_fu_287_p3.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_9_fu_287_p3.read() != ap_const_lv16_0);
}

void fir_hw::thread_tomb_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tomb_V_address0 =  (sc_lv<7>) (tmp_7_fu_221_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tomb_V_address0 =  (sc_lv<7>) (tmp_3_fu_204_p1.read());
    } else if ((esl_seteq<1,1,1>(tmp_2_fu_187_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tomb_V_address0 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(tmp_2_fu_187_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tomb_V_address0 =  (sc_lv<7>) (tmp_5_fu_199_p1.read());
    } else {
        tomb_V_address0 = "XXXXXXX";
    }
}

void fir_hw::thread_tomb_V_ce0() {
    if (((esl_seteq<1,1,1>(tmp_2_fu_187_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(tmp_2_fu_187_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        tomb_V_ce0 = ap_const_logic_1;
    } else {
        tomb_V_ce0 = ap_const_logic_0;
    }
}

void fir_hw::thread_tomb_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tomb_V_d0 = tomb_V_q0.read();
    } else if ((esl_seteq<1,1,1>(tmp_2_fu_187_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tomb_V_d0 = input_V.read();
    } else {
        tomb_V_d0 =  (sc_lv<24>) ("XXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fir_hw::thread_tomb_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(tmp_2_fu_187_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        tomb_V_we0 = ap_const_logic_1;
    } else {
        tomb_V_we0 = ap_const_logic_0;
    }
}

void fir_hw::thread_underflow_fu_459_p2() {
    underflow_fu_459_p2 = (signbit_fu_233_p3.read() & tmp1_fu_453_p2.read());
}

void fir_hw::thread_underflow_not_fu_477_p2() {
    underflow_not_fu_477_p2 = (tmp2_fu_471_p2.read() | p_38_i_fu_411_p2.read());
}

void fir_hw::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_2_fu_187_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(tmp_fu_213_p3.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

void fir_hw::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_V\" :  \"" << input_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_V\" :  \"" << res_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_V_ap_vld\" :  \"" << res_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

