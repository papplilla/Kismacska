; Listing generated by Microsoft (R) Optimizing Compiler Version 19.14.26430.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@OICGFOEL@output?4bmp?$AA@		; `string'
PUBLIC	??_C@_0P@NDNGIGNK@Teszt?5started?6?$AA@		; `string'
PUBLIC	??_C@_0BM@BNCOCNFJ@Output?5resolution?3?5?$CF4dx?$CF4d?6?$AA@ ; `string'
PUBLIC	??_C@_0BC@GIOFBGHC@hf_output_ref?4bmp?$AA@	; `string'
PUBLIC	??_C@_0CB@IAMBGCGL@Ref?5picture?5resolution?3?5?$CF4dx?$CF4d?6@ ; `string'
PUBLIC	??_C@_0BM@BOHMLGCJ@Nem?5egyeznek?5a?5sz?iless?igek?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@IIPHDHFB@Nem?5egyeznek?5a?5hossz?zs?agok?6?$AA@ ; `string'
PUBLIC	??_C@_09CCAEKEFA@Baj?5van?$CB?6?$AA@		; `string'
PUBLIC	??_C@_07BLFELHIC@Erdeti?6?$AA@			; `string'
PUBLIC	??_C@_0BM@GEKJLJJG@?$CFd?4?5Sor?0?5?3?$CFd?4?5oszlop?3?5?$CFd?5?6?5?$AA@ ; `string'
PUBLIC	??_C@_06EKAJNINI@Sajat?6?$AA@			; `string'
PUBLIC	??_C@_0BN@LJFGHIFM@?$CFd?4?5Sor?0?5?3?$CFd?4?5oszlop?3?5?$CFd?5?6?6?5?$AA@ ; `string'
PUBLIC	??_C@_0L@JDMPMIEE@Minden?5ok?6?$AA@		; `string'
PUBLIC	??_C@_09HDLCNAPM@input?4jpg?$AA@		; `string'
PUBLIC	??_C@_0BL@EIJCCJGD@Input?5resolution?3?5?$CF4dx?$CF4d?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@NGKMKCMP@C?5CPU?5TIME?3?5?$CF4?44f?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@CKJPLJHO@C?5Mpixel?1s?3?5?$CF4?44f?6?$AA@ ; `string'
PUBLIC	??_C@_0L@DMOPMCBB@output?4jpg?$AA@		; `string'
EXTRN	__imp_ilGenImages:PROC
EXTRN	__imp_ilGetInteger:PROC
EXTRN	__imp_ilGetData:PROC
EXTRN	__imp_ilBindImage:PROC
EXTRN	__imp_ilInit:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	__imp_iluInit:PROC
EXTRN	_aligned_malloc:PROC
EXTRN	__imp_ilDeleteImages:PROC
EXTRN	__imp_ilLoadImage:PROC
EXTRN	__acrt_iob_func:PROC
EXTRN	__imp_ilSetData:PROC
EXTRN	__imp_ilEnable:PROC
EXTRN	__imp_ilSaveImage:PROC
EXTRN	clock:PROC
EXTRN	_aligned_free:PROC
;	COMDAT ??_C@_0L@DMOPMCBB@output?4jpg?$AA@
CONST	SEGMENT
??_C@_0L@DMOPMCBB@output?4jpg?$AA@ DB 'output.jpg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CKJPLJHO@C?5Mpixel?1s?3?5?$CF4?44f?6?$AA@
CONST	SEGMENT
??_C@_0BD@CKJPLJHO@C?5Mpixel?1s?3?5?$CF4?44f?6?$AA@ DB 'C Mpixel/s: %4.4f'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NGKMKCMP@C?5CPU?5TIME?3?5?$CF4?44f?6?$AA@
CONST	SEGMENT
??_C@_0BD@NGKMKCMP@C?5CPU?5TIME?3?5?$CF4?44f?6?$AA@ DB 'C CPU TIME: %4.4f'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EIJCCJGD@Input?5resolution?3?5?$CF4dx?$CF4d?6?$AA@
CONST	SEGMENT
??_C@_0BL@EIJCCJGD@Input?5resolution?3?5?$CF4dx?$CF4d?6?$AA@ DB 'Input re'
	DB	'solution: %4dx%4d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HDLCNAPM@input?4jpg?$AA@
CONST	SEGMENT
??_C@_09HDLCNAPM@input?4jpg?$AA@ DB 'input.jpg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JDMPMIEE@Minden?5ok?6?$AA@
CONST	SEGMENT
??_C@_0L@JDMPMIEE@Minden?5ok?6?$AA@ DB 'Minden ok', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LJFGHIFM@?$CFd?4?5Sor?0?5?3?$CFd?4?5oszlop?3?5?$CFd?5?6?6?5?$AA@
CONST	SEGMENT
??_C@_0BN@LJFGHIFM@?$CFd?4?5Sor?0?5?3?$CFd?4?5oszlop?3?5?$CFd?5?6?6?5?$AA@ DB '%'
	DB	'd. Sor, :%d. oszlop: %d ', 0aH, 0aH, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKAJNINI@Sajat?6?$AA@
CONST	SEGMENT
??_C@_06EKAJNINI@Sajat?6?$AA@ DB 'Sajat', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GEKJLJJG@?$CFd?4?5Sor?0?5?3?$CFd?4?5oszlop?3?5?$CFd?5?6?5?$AA@
CONST	SEGMENT
??_C@_0BM@GEKJLJJG@?$CFd?4?5Sor?0?5?3?$CFd?4?5oszlop?3?5?$CFd?5?6?5?$AA@ DB '%'
	DB	'd. Sor, :%d. oszlop: %d ', 0aH, ' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BLFELHIC@Erdeti?6?$AA@
CONST	SEGMENT
??_C@_07BLFELHIC@Erdeti?6?$AA@ DB 'Erdeti', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CCAEKEFA@Baj?5van?$CB?6?$AA@
CONST	SEGMENT
??_C@_09CCAEKEFA@Baj?5van?$CB?6?$AA@ DB 'Baj van!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IIPHDHFB@Nem?5egyeznek?5a?5hossz?zs?agok?6?$AA@
CONST	SEGMENT
??_C@_0BM@IIPHDHFB@Nem?5egyeznek?5a?5hossz?zs?agok?6?$AA@ DB 'Nem egyezne'
	DB	'k a hossz', 0faH, 's', 0e1H, 'gok', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BOHMLGCJ@Nem?5egyeznek?5a?5sz?iless?igek?6?$AA@
CONST	SEGMENT
??_C@_0BM@BOHMLGCJ@Nem?5egyeznek?5a?5sz?iless?igek?6?$AA@ DB 'Nem egyezne'
	DB	'k a sz', 0e9H, 'less', 0e9H, 'gek', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IAMBGCGL@Ref?5picture?5resolution?3?5?$CF4dx?$CF4d?6@
CONST	SEGMENT
??_C@_0CB@IAMBGCGL@Ref?5picture?5resolution?3?5?$CF4dx?$CF4d?6@ DB 'Ref p'
	DB	'icture resolution: %4dx%4d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GIOFBGHC@hf_output_ref?4bmp?$AA@
CONST	SEGMENT
??_C@_0BC@GIOFBGHC@hf_output_ref?4bmp?$AA@ DB 'hf_output_ref.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BNCOCNFJ@Output?5resolution?3?5?$CF4dx?$CF4d?6?$AA@
CONST	SEGMENT
??_C@_0BM@BNCOCNFJ@Output?5resolution?3?5?$CF4dx?$CF4d?6?$AA@ DB 'Output '
	DB	'resolution: %4dx%4d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NDNGIGNK@Teszt?5started?6?$AA@
CONST	SEGMENT
??_C@_0P@NDNGIGNK@Teszt?5started?6?$AA@ DB 'Teszt started', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OICGFOEL@output?4bmp?$AA@
CONST	SEGMENT
??_C@_0L@OICGFOEL@output?4bmp?$AA@ DB 'output.bmp', 00H	; `string'
CONST	ENDS
PUBLIC	main
PUBLIC	printf
PUBLIC	_vfprintf_l
PUBLIC	__local_stdio_printf_options
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN74
	DD	imagerel $LN74+18
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$main DD imagerel $LN74+18
	DD	imagerel $LN74+298
	DD	imagerel $chain$0$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$main DD imagerel $LN74+298
	DD	imagerel $LN74+1356
	DD	imagerel $chain$1$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$main DD imagerel $LN74+1356
	DD	imagerel $LN74+2131
	DD	imagerel $chain$2$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6@printf
	DD	imagerel $LN6@printf+83
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4@vfprintf_l
	DD	imagerel $LN4@vfprintf_l+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 041b01H
	DD	07017521bH
	DD	030156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$main DD 020021H
	DD	01bc400H
	DD	imagerel $LN74
	DD	imagerel $LN74+18
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$main DD 020821H
	DD	01bc408H
	DD	imagerel $LN74+18
	DD	imagerel $LN74+298
	DD	imagerel $chain$0$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$main DD 020921H
	DD	0c6809H
	DD	imagerel $LN74
	DD	imagerel $LN74+18
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	091201H
	DD	01c0112H
	DD	0e009f00bH
	DD	07005d007H
	DD	050036004H
	DD	03002H
; Function compile flags: /Ogtpy
; File d:\d_strabi\d dokumentumai\bme\heterogén számítási rendszerek\hf\kismacska\hetero_hf_3\heterogen_hf_cpu_batchers\heterogen_hf_szp\_src\main.cpp
;	COMDAT main
_TEXT	SEGMENT
tv12017 = 64
imgFloatRes$1$ = 64
tv12020 = 72
tv11978 = 72
tv12018 = 80
tv11983 = 80
imgFloat$1$ = 88
tv11986 = 96
tv11981 = 96
tv12001 = 104
tv11998 = 104
tv11959 = 112
tv11957 = 112
tv11960 = 120
tv11956 = 120
tv12041 = 128
tv11961 = 128
tv12039 = 136
tv11963 = 136
tv11999 = 144
tv11965 = 144
tv12044 = 152
tv11967 = 152
imgData$1$ = 160
tv12005 = 168
tv12003 = 176
tv11989 = 288
imgHeight$1$ = 288
ilImg$ = 296
tv12021 = 304
tv11991 = 304
imgWidth$1$ = 312
main	PROC						; COMDAT

; 97   : {

$LN74:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r13
	push	r14
	push	r15
	sub	rsp, 224				; 000000e0H
	vmovaps	XMMWORD PTR [rsp+192], xmm6

; 98   : #ifdef  ONLY_VERIFY
; 99   : 
; 100  : 	verifyImage();
; 101  : #else 
; 102  : 	ilInit(); iluInit();

	call	QWORD PTR __imp_ilInit
	call	QWORD PTR __imp_iluInit

; 103  : 	ILboolean ret;
; 104  : 	ILuint ilImg=0;

	xor	r13d, r13d

; 105  : 	ilGenImages(1, &ilImg);

	lea	rdx, QWORD PTR ilImg$[rsp]
	mov	DWORD PTR ilImg$[rsp], r13d
	lea	ecx, QWORD PTR [r13+1]
	call	QWORD PTR __imp_ilGenImages

; 106  : 	ilBindImage(ilImg);

	mov	ecx, DWORD PTR ilImg$[rsp]
	call	QWORD PTR __imp_ilBindImage

; 107  :     ret = ilLoadImage((const char*)("input.jpg"));

	lea	rcx, OFFSET FLAT:??_C@_09HDLCNAPM@input?4jpg?$AA@
	call	QWORD PTR __imp_ilLoadImage

; 108  : 	ILubyte* imgData = ilGetData(); 

	call	QWORD PTR __imp_ilGetData

; 109  : 
; 110  : 	int imgWidth = ilGetInteger(IL_IMAGE_WIDTH);

	mov	ecx, 3556				; 00000de4H
	mov	QWORD PTR imgData$1$[rsp], rax
	mov	rsi, rax
	call	QWORD PTR __imp_ilGetInteger

; 111  : 	int imgHeight = ilGetInteger(IL_IMAGE_HEIGHT);

	mov	ecx, 3557				; 00000de5H
	mov	DWORD PTR imgWidth$1$[rsp], eax
	mov	edi, eax
	call	QWORD PTR __imp_ilGetInteger

; 112  : 	ILint imgOrigin = ilGetInteger(IL_ORIGIN_MODE);

	mov	ecx, 1539				; 00000603H
	mov	DWORD PTR imgHeight$1$[rsp], eax
	mov	r15d, eax
	call	QWORD PTR __imp_ilGetInteger

; 113  : 
; 114  : 	printf("Input resolution: %4dx%4d\n", imgWidth, imgHeight);

	mov	r8d, r15d
	lea	rcx, OFFSET FLAT:??_C@_0BL@EIJCCJGD@Input?5resolution?3?5?$CF4dx?$CF4d?6?$AA@
	mov	edx, edi
	call	printf

; 115  : 
; 116  : 	float *imgFloat;
; 117  : 	int imgWidthF = imgWidth+FILTER_W-1;
; 118  : 	int imgHeightF = imgHeight+FILTER_H-1;

	lea	ebx, DWORD PTR [r15+4]

; 119  : 	int imgFOffsetW = (FILTER_W-1)/2;
; 120  : 	int imgFOffsetH = (FILTER_H-1)/2;
; 121  : 	imgFloat   = (float *)(_aligned_malloc(4*imgWidthF*imgHeightF*sizeof(float), 32));

	mov	eax, ebx
	lea	r14d, DWORD PTR [rdi+4]
	imul	eax, r14d
	lea	edx, QWORD PTR [r13+32]
	shl	eax, 2
	cdqe
	shl	rax, 2
	mov	rcx, rax
	mov	QWORD PTR tv12044[rsp], rax
	call	_aligned_malloc
	mov	QWORD PTR imgFloat$1$[rsp], rax
	mov	r10, rax

; 122  :     int row, col;
; 123  : 
; 124  : 	for (row=0; row<imgHeightF; row++)

	test	ebx, ebx
	jle	SHORT $LN3@main

; 98   : #ifdef  ONLY_VERIFY
; 99   : 
; 100  : 	verifyImage();
; 101  : #else 
; 102  : 	ilInit(); iluInit();

	lea	ecx, DWORD PTR [r14*4]
	mov	r8d, ebx
	movsxd	r9, ecx
	lea	rdx, QWORD PTR [rax+8]
	shl	r9, 2
$LL4@main:

; 125  : 	{
; 126  : 		for (col=0; col<imgWidthF;col++)

	test	r14d, r14d
	jle	SHORT $LN2@main
	mov	rax, rdx
	mov	ecx, r14d
	npad	4
$LL7@main:

; 127  : 		{
; 128  : 			int pixel = (row*imgWidthF + col)*4;
; 129  : 			*(imgFloat+pixel+0) = 0.0f;

	mov	QWORD PTR [rax-8], r13

; 130  : 			*(imgFloat + pixel + 1) = 0.0f;
; 131  : 			*(imgFloat + pixel + 2) = 0.0f;

	mov	QWORD PTR [rax], r13
	lea	rax, QWORD PTR [rax+16]
	sub	rcx, 1
	jne	SHORT $LL7@main
$LN2@main:

; 122  :     int row, col;
; 123  : 
; 124  : 	for (row=0; row<imgHeightF; row++)

	add	rdx, r9
	sub	r8, 1
	jne	SHORT $LL4@main
$LN3@main:
	mov	QWORD PTR [rsp+216], r12

; 132  : 			*(imgFloat + pixel + 3) = 0.0f;
; 133  : 		}
; 134  : 	}
; 135  : 
; 136  : 	for (row=0; row<imgHeight; row++)

	test	r15d, r15d
	jle	$LN9@main
	lea	ecx, DWORD PTR [r14*8]
	mov	r15d, r13d
	mov	rbx, r13
	movsxd	rbp, ecx
	add	rbp, 8
	movsxd	r13, ecx
	lea	eax, DWORD PTR [rdi+rdi*2]
	mov	QWORD PTR tv12018[rsp], rbp
	cdqe
	lea	r12d, DWORD PTR [r14+r14]
	mov	QWORD PTR tv11999[rsp], rax
	lea	eax, DWORD PTR [r14*4]
	cdqe
	lea	r8, QWORD PTR [rbp+6]
	mov	QWORD PTR tv12041[rsp], rax
	lea	r8, QWORD PTR [r10+r8*4]
	mov	DWORD PTR tv12021[rsp], r12d
	mov	QWORD PTR tv12017[rsp], r8
	lea	rax, QWORD PTR [rax*4]
	mov	QWORD PTR tv12039[rsp], rax
	lea	eax, DWORD PTR [r14*8+16]
	movsxd	rdx, eax
	mov	eax, DWORD PTR imgHeight$1$[rsp]
	sub	rdx, rbp
	mov	QWORD PTR tv11986[rsp], rdx
	sub	r13, rbp
	mov	QWORD PTR tv12020[rsp], rax
$LL10@main:

; 137  : 	{
; 138  : 		for (col=0; col<imgWidth;col++)

	xor	r11d, r11d
	cmp	edi, 4
	jl	$LC59@main
	lea	rdx, QWORD PTR [rsi+1]
	mov	r10, rsi
	lea	rcx, QWORD PTR [rbx+9]
	sub	r10, rdx
	mov	rax, rcx
	lea	r11, QWORD PTR [rsi-3]
	sub	rax, rbx
	lea	r9, QWORD PTR [rdx+3]
	add	rax, -3
	sub	rcx, rbx
	mov	QWORD PTR tv12005[rsp], rax
	sub	rcx, rdx
	mov	r14, QWORD PTR tv12005[rsp]
	sub	rax, rdx
	mov	rdx, QWORD PTR tv11986[rsp]
	add	r11, rax
	dec	rax
	mov	QWORD PTR tv12003[rsp], r11
	add	rax, rsi
	add	r9, rbx
	mov	QWORD PTR tv12001[rsp], rax
	lea	rax, QWORD PTR [rcx+rsi]
	mov	QWORD PTR tv11957[rsp], rax
	lea	rax, QWORD PTR [rsi+2]
	mov	rsi, QWORD PTR tv12003[rsp]
	add	rax, rcx
	mov	rbp, QWORD PTR tv11957[rsp]
	mov	QWORD PTR tv11956[rsp], rax
	lea	eax, DWORD PTR [rdi-4]
	mov	rdi, QWORD PTR tv12001[rsp]
	mov	r12, QWORD PTR tv11956[rsp]
	shr	eax, 2
	inc	eax
	mov	ecx, eax
	lea	r11d, DWORD PTR [rax*4]
	npad	13
$LL60@main:

; 139  : 		{
; 140  : 			int pixel_dst = ((row+imgFOffsetH)*imgWidthF + (col+imgFOffsetW))*4;
; 141  : 			int pixel_src = (row*imgWidth + col)*3;
; 142  : 			*(imgFloat+pixel_dst+0) = (float)(*(imgData+pixel_src+0));

	movzx	eax, BYTE PTR [r9+r10-3]

; 145  : 			*(imgFloat+pixel_dst+3) = 0.0;

	lea	r8, QWORD PTR [r8+64]
	lea	r9, QWORD PTR [r9+12]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR [r8-88], xmm0
	movzx	eax, BYTE PTR [r9-15]
	vxorps	xmm0, xmm0, xmm0
	vxorps	xmm1, xmm1, xmm1
	vcvtsi2ss xmm1, xmm1, eax
	vmovss	DWORD PTR [r8-84], xmm1
	movzx	eax, BYTE PTR [r9-14]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR [r8-80], xmm0
	mov	DWORD PTR [r8-76], 0
	movzx	eax, BYTE PTR [r9+r10-12]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR [r8-72], xmm0
	movzx	eax, BYTE PTR [r9-12]
	vxorps	xmm0, xmm0, xmm0
	vxorps	xmm1, xmm1, xmm1
	vcvtsi2ss xmm1, xmm1, eax
	vmovss	DWORD PTR [r8-68], xmm1
	movzx	eax, BYTE PTR [r9-11]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR [r8-64], xmm0
	mov	DWORD PTR [r8-60], 0
	movzx	eax, BYTE PTR [r9+rsi-12]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR [r8+rdx*4-88], xmm0
	movzx	eax, BYTE PTR [r9+r14-15]
	vxorps	xmm0, xmm0, xmm0
	vxorps	xmm1, xmm1, xmm1
	vcvtsi2ss xmm1, xmm1, eax
	vmovss	DWORD PTR [r8+rdx*4-84], xmm1
	movzx	eax, BYTE PTR [r9+rdi-12]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR [r8+rdx*4-80], xmm0
	mov	DWORD PTR [r8+rdx*4-76], 0
	movzx	eax, BYTE PTR [r9+rbp-15]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR [r8+r13*4-8], xmm0
	movzx	eax, BYTE PTR [r9-6]
	vxorps	xmm1, xmm1, xmm1
	vcvtsi2ss xmm1, xmm1, eax
	vmovss	DWORD PTR [r8+r13*4-4], xmm1
	movzx	eax, BYTE PTR [r12+r9-15]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR [r8+r13*4], xmm0
	mov	DWORD PTR [r8+r13*4+4], 0
	sub	rcx, 1
	jne	$LL60@main
	mov	edi, DWORD PTR imgWidth$1$[rsp]
	mov	rsi, QWORD PTR imgData$1$[rsp]
	mov	rbp, QWORD PTR tv12018[rsp]
	mov	r12d, DWORD PTR tv12021[rsp]
	mov	r8, QWORD PTR tv12017[rsp]
	lea	r14d, DWORD PTR [rdi+4]
	mov	rax, QWORD PTR tv12020[rsp]
	mov	r10, QWORD PTR imgFloat$1$[rsp]
$LC59@main:

; 137  : 	{
; 138  : 		for (col=0; col<imgWidth;col++)

	cmp	r11d, edi
	jge	$LN8@main
	add	r10, 8
	lea	eax, DWORD PTR [r15+r11]
	lea	ecx, DWORD PTR [rax+rax*2]
	movsxd	r9, ecx
	lea	rdx, QWORD PTR [rsi+1]
	lea	eax, DWORD PTR [r12+r11]
	add	r9, rdx
	lea	eax, DWORD PTR [rax*4+8]
	mov	ecx, edi
	movsxd	r8, eax
	lea	r8, QWORD PTR [r10+r8*4]
	mov	r10, rsi
	sub	r10, rdx
	sub	ecx, r11d
$LC13@main:

; 139  : 		{
; 140  : 			int pixel_dst = ((row+imgFOffsetH)*imgWidthF + (col+imgFOffsetW))*4;
; 141  : 			int pixel_src = (row*imgWidth + col)*3;
; 142  : 			*(imgFloat+pixel_dst+0) = (float)(*(imgData+pixel_src+0));

	movzx	eax, BYTE PTR [r9+r10]
	lea	r8, QWORD PTR [r8+16]
	lea	r9, QWORD PTR [r9+3]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR [r8-24], xmm0

; 143  : 			*(imgFloat+pixel_dst+1) = (float)(*(imgData+pixel_src+1));

	movzx	eax, BYTE PTR [r9-3]
	vxorps	xmm1, xmm1, xmm1
	vcvtsi2ss xmm1, xmm1, eax
	vmovss	DWORD PTR [r8-20], xmm1

; 144  : 			*(imgFloat+pixel_dst+2) = (float)(*(imgData+pixel_src+2));

	movzx	eax, BYTE PTR [r9-2]

; 145  : 			*(imgFloat+pixel_dst+3) = 0.0;

	mov	DWORD PTR [r8-12], 0
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR [r8-16], xmm0
	sub	rcx, 1
	jne	SHORT $LC13@main
	mov	r8, QWORD PTR tv12017[rsp]
	mov	rax, QWORD PTR tv12020[rsp]
$LN8@main:

; 132  : 			*(imgFloat + pixel + 3) = 0.0f;
; 133  : 		}
; 134  : 	}
; 135  : 
; 136  : 	for (row=0; row<imgHeight; row++)

	add	rbp, QWORD PTR tv12041[rsp]
	add	r12d, r14d
	add	r8, QWORD PTR tv12039[rsp]
	add	r15d, edi
	add	rbx, QWORD PTR tv11999[rsp]
	mov	r10, QWORD PTR imgFloat$1$[rsp]
	sub	rax, 1
	mov	QWORD PTR tv12020[rsp], rax
	mov	QWORD PTR tv12018[rsp], rbp
	mov	QWORD PTR tv12017[rsp], r8
	mov	DWORD PTR tv12021[rsp], r12d
	jne	$LL10@main
	mov	r15d, DWORD PTR imgHeight$1$[rsp]
	xor	r13d, r13d
$LN9@main:

; 146  : 		}
; 147  : 	}
; 148  : 
; 149  : 
; 150  : // IMAGE PROCESSING
; 151  : //---------------------------------------------------------------------------------------
; 152  : 	clock_t s0, e0;
; 153  :     double d0;
; 154  : 
; 155  : 	float *imgFloatRes;
; 156  :     imgFloatRes = (float *)(_aligned_malloc(4*imgWidthF*imgHeightF*sizeof(float), 32));

	mov	rcx, QWORD PTR tv12044[rsp]
	mov	edx, 32					; 00000020H
	call	_aligned_malloc
	mov	rbp, rax
	mov	QWORD PTR imgFloatRes$1$[rsp], rax

; 157  : 
; 158  : 	double mpixel;
; 159  : 
; 160  : 
; 161  : 	s0 = clock();

	call	clock
	mov	ebx, eax

; 162  : for (int r=0; r<RUNS; r++)
; 163  : {
; 164  : 	//medianFilter(imgHeight, imgWidth, imgWidthF, imgFOffsetH, imgFOffsetW, imgFloat, imgFloatRes);
; 165  : 	medianFilterAVX(imgHeight, imgWidth, imgWidthF, imgFOffsetH, imgFOffsetW, imgFloat, imgFloatRes);

	mov	QWORD PTR [rsp+48], rbp
	mov	rax, QWORD PTR imgFloat$1$[rsp]
	mov	r8d, r14d
	mov	edx, edi
	mov	QWORD PTR [rsp+40], rax
	mov	ecx, r15d
	call	?medianFilterAVX@@YAXHHHHHPEAM0@Z	; medianFilterAVX

; 166  : }
; 167  : 
; 168  :     e0 = clock();

	call	clock

; 169  :     d0 = (double)(e0-s0)/(RUNS*CLOCKS_PER_SEC);

	sub	eax, ebx

; 170  : 	mpixel = (imgWidth*imgHeight/d0)/1000000;
; 171  :     printf("C CPU TIME: %4.4f\n", d0);

	lea	rcx, OFFSET FLAT:??_C@_0BD@NGKMKCMP@C?5CPU?5TIME?3?5?$CF4?44f?6?$AA@
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2sd xmm0, xmm0, eax
	vdivsd	xmm6, xmm0, QWORD PTR __real@408f400000000000
	vmovaps	xmm1, xmm6
	vmovq	rdx, xmm1
	call	printf
	mov	eax, r15d

; 172  : 	printf("C Mpixel/s: %4.4f\n", mpixel);

	lea	rcx, OFFSET FLAT:??_C@_0BD@CKJPLJHO@C?5Mpixel?1s?3?5?$CF4?44f?6?$AA@
	imul	eax, edi
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2sd xmm0, xmm0, eax
	vdivsd	xmm1, xmm0, xmm6
	vdivsd	xmm1, xmm1, QWORD PTR __real@412e848000000000
	vmovq	rdx, xmm1
	call	printf
	vmovaps	xmm6, XMMWORD PTR [rsp+192]

; 173  : 
; 174  : 
; 175  : 
; 176  : 	float *imgFloatWrite;
; 177  : 	imgFloatWrite = imgFloatRes;
; 178  : 
; 179  : //---------------------------------------------------------------------------------------
; 180  : // IMAGE PROCESSING END
; 181  : 
; 182  : 
; 183  : 	for (row=0; row<imgHeight; row++)

	test	r15d, r15d
	jle	$LN18@main

; 169  :     d0 = (double)(e0-s0)/(RUNS*CLOCKS_PER_SEC);

	lea	ecx, DWORD PTR [rdi*8]
	mov	DWORD PTR tv11991[rsp], r13d
	mov	r15d, r13d
	movsxd	r11, ecx
	mov	r14, r13
	lea	eax, DWORD PTR [rdi+rdi*2]
	cdqe
	lea	r12, QWORD PTR [rbp+24]
	mov	QWORD PTR tv11998[rsp], rax
	lea	r10d, DWORD PTR [rdi+rdi]
	lea	eax, DWORD PTR [rdi*4]
	movsxd	r13, ecx
	cdqe
	add	r13, 8
	mov	QWORD PTR tv11960[rsp], rax
	mov	r9, rbp
	mov	QWORD PTR tv11983[rsp], r13
	mov	DWORD PTR tv11978[rsp], r10d
	lea	rax, QWORD PTR [rax*4]
	mov	QWORD PTR tv11959[rsp], rax
	lea	r12, QWORD PTR [r12+r13*4]
	lea	eax, DWORD PTR [rdi*8+16]
	mov	QWORD PTR tv11981[rsp], r12
	movsxd	rbx, eax
	mov	eax, DWORD PTR imgHeight$1$[rsp]
	sub	rbx, r13
	sub	r11, r13
	mov	QWORD PTR tv11989[rsp], rax
	npad	3
$LL19@main:

; 184  : 	{
; 185  : 		for (col=0; col<imgWidth;col++)

	xor	ebp, ebp
	cmp	edi, 4
	jl	$LC62@main
	lea	rcx, QWORD PTR [rsi+1]
	mov	r9, rsi
	sub	r9, rcx
	lea	rbp, QWORD PTR [rsi-3]
	lea	r10, QWORD PTR [r14+9]
	mov	r8, r12
	mov	r12, r10
	lea	rdx, QWORD PTR [r14+3]
	add	rdx, rcx
	sub	r12, r14
	sub	r10, r14
	lea	rax, QWORD PTR [r12-3]
	sub	rax, rcx
	add	rbp, rax
	dec	rax
	add	rax, rsi
	mov	QWORD PTR tv11967[rsp], rbp
	mov	QWORD PTR tv11965[rsp], rax
	mov	rax, r10
	sub	rax, rcx
	lea	rcx, QWORD PTR [rsi-3]
	add	rcx, rax
	dec	rsi
	add	rax, rsi
	mov	QWORD PTR tv11963[rsp], rcx
	mov	rsi, QWORD PTR tv11967[rsp]
	mov	r13, QWORD PTR tv11963[rsp]
	mov	QWORD PTR tv11961[rsp], rax
	lea	eax, DWORD PTR [rdi-4]
	mov	rdi, QWORD PTR tv11965[rsp]
	mov	r15, QWORD PTR tv11961[rsp]
	shr	eax, 2
	inc	eax
	mov	ecx, eax
	lea	ebp, DWORD PTR [rax*4]
	npad	11
$LL63@main:

; 191  : 			*(imgData+pixel_dst+2) = (ILubyte)(*(imgFloatWrite+pixel_src+2));

	lea	rdx, QWORD PTR [rdx+12]
	vcvttss2si eax, DWORD PTR [r8-24]
	mov	BYTE PTR [rdx+r9-15], al
	vcvttss2si eax, DWORD PTR [r8-20]
	mov	BYTE PTR [rdx-15], al
	vcvttss2si eax, DWORD PTR [r8-16]
	mov	BYTE PTR [rdx-14], al
	vcvttss2si eax, DWORD PTR [r8-8]
	mov	BYTE PTR [rdx+r9-12], al
	vcvttss2si eax, DWORD PTR [r8-4]
	mov	BYTE PTR [rdx-12], al
	vcvttss2si eax, DWORD PTR [r8]
	mov	BYTE PTR [rdx-11], al
	vcvttss2si eax, DWORD PTR [r8+rbx*4-24]
	mov	BYTE PTR [rsi+rdx-12], al
	vcvttss2si eax, DWORD PTR [r8+rbx*4-20]
	mov	BYTE PTR [r12+rdx-18], al
	vcvttss2si eax, DWORD PTR [r8+rbx*4-16]
	mov	BYTE PTR [rdi+rdx-12], al
	vcvttss2si eax, DWORD PTR [r8+r11*4+56]
	mov	BYTE PTR [rdx+r13-12], al
	vcvttss2si eax, DWORD PTR [r8+r11*4+60]
	mov	BYTE PTR [r10+rdx-15], al
	vcvttss2si eax, DWORD PTR [r8+r11*4+64]
	mov	BYTE PTR [r15+rdx-12], al
	lea	r8, QWORD PTR [r8+64]
	sub	rcx, 1
	jne	$LL63@main
	mov	edi, DWORD PTR imgWidth$1$[rsp]
	mov	rsi, QWORD PTR imgData$1$[rsp]
	mov	r15d, DWORD PTR tv11991[rsp]
	mov	r13, QWORD PTR tv11983[rsp]
	mov	r12, QWORD PTR tv11981[rsp]
	mov	rax, QWORD PTR tv11989[rsp]
	mov	r9, QWORD PTR imgFloatRes$1$[rsp]
	mov	r10d, DWORD PTR tv11978[rsp]
$LC62@main:

; 184  : 	{
; 185  : 		for (col=0; col<imgWidth;col++)

	cmp	ebp, edi
	jge	SHORT $LN17@main
	lea	eax, DWORD PTR [r15+rbp]
	lea	ecx, DWORD PTR [rax+rax*2]
	movsxd	r8, ecx
	lea	eax, DWORD PTR [r10+r15]
	add	eax, ebp
	lea	rdx, QWORD PTR [rsi+1]
	mov	r10, rsi
	add	r8, rdx
	sub	r10, rdx
	lea	eax, DWORD PTR [rax*4+8]
	movsxd	rcx, eax
	lea	r9, QWORD PTR [r9+rcx*4]
	mov	ecx, edi
	add	r9, 8
	sub	ecx, ebp
$LC22@main:
	lea	r8, QWORD PTR [r8+3]

; 186  : 		{
; 187  : 			int pixel_src = ((row+ imgFOffsetH)*imgWidth + col+ imgFOffsetW)*4;
; 188  : 			int pixel_dst = (row*imgWidth + col)*3;
; 189  : 			*(imgData+pixel_dst+0) = (ILubyte)(*(imgFloatWrite+pixel_src+0));

	vcvttss2si eax, DWORD PTR [r9-8]
	mov	BYTE PTR [r8+r10-3], al

; 190  : 			*(imgData+pixel_dst+1) = (ILubyte)(*(imgFloatWrite+pixel_src+1));

	vcvttss2si eax, DWORD PTR [r9-4]
	mov	BYTE PTR [r8-3], al

; 191  : 			*(imgData+pixel_dst+2) = (ILubyte)(*(imgFloatWrite+pixel_src+2));

	vcvttss2si eax, DWORD PTR [r9]
	mov	BYTE PTR [r8-2], al
	lea	r9, QWORD PTR [r9+16]
	sub	rcx, 1
	jne	SHORT $LC22@main
	mov	rax, QWORD PTR tv11989[rsp]
$LN17@main:

; 173  : 
; 174  : 
; 175  : 
; 176  : 	float *imgFloatWrite;
; 177  : 	imgFloatWrite = imgFloatRes;
; 178  : 
; 179  : //---------------------------------------------------------------------------------------
; 180  : // IMAGE PROCESSING END
; 181  : 
; 182  : 
; 183  : 	for (row=0; row<imgHeight; row++)

	add	r13, QWORD PTR tv11960[rsp]
	lea	r10d, DWORD PTR [rdi+rdi]
	add	r12, QWORD PTR tv11959[rsp]
	add	r15d, edi
	add	r14, QWORD PTR tv11998[rsp]
	mov	r9, QWORD PTR imgFloatRes$1$[rsp]
	sub	rax, 1
	mov	QWORD PTR tv11989[rsp], rax
	mov	DWORD PTR tv11991[rsp], r15d
	mov	QWORD PTR tv11983[rsp], r13
	mov	QWORD PTR tv11981[rsp], r12
	jne	$LL19@main
	mov	rbp, r9
$LN18@main:

; 192  : 		}
; 193  : 	}
; 194  : 
; 195  : 
; 196  : 	_aligned_free(imgFloat);

	mov	rcx, QWORD PTR imgFloat$1$[rsp]
	call	_aligned_free

; 197  :     _aligned_free(imgFloatRes);

	mov	rcx, rbp
	call	_aligned_free

; 198  : 
; 199  : 	ret = ilSetData(imgData);

	mov	rcx, rsi
	call	QWORD PTR __imp_ilSetData

; 200  : 	ilEnable(IL_FILE_OVERWRITE);

	mov	ecx, 1568				; 00000620H
	call	QWORD PTR __imp_ilEnable

; 201  :     ilSaveImage((const char*)("output.jpg"));

	lea	rcx, OFFSET FLAT:??_C@_0L@DMOPMCBB@output?4jpg?$AA@
	call	QWORD PTR __imp_ilSaveImage

; 202  : 
; 203  : #ifdef VERIFY_AND_RUN
; 204  : 	ilSaveImage((const char*)("output.bmp"));				// teszteléshez
; 205  : #endif // VERIFY_AND_RUN
; 206  : 	ilDeleteImages(1, &ilImg);

	lea	rdx, QWORD PTR ilImg$[rsp]
	mov	ecx, 1
	call	QWORD PTR __imp_ilDeleteImages

; 207  : 
; 208  : #ifdef VERIFY_AND_RUN
; 209  : 	verifyImage();
; 210  : #endif // VERIFY_AND_RUN
; 211  : 	
; 212  : 
; 213  : #endif	// ONLY_VERIFY
; 214  : }

	mov	r12, QWORD PTR [rsp+216]
	xor	eax, eax
	add	rsp, 224				; 000000e0H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
main	ENDP
_TEXT	ENDS
END
