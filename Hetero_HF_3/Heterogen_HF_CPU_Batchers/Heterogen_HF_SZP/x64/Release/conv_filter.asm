; Listing generated by Microsoft (R) Optimizing Compiler Version 19.14.26430.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__security_check_cookie:PROC
PUBLIC	?med_filter@@YAXHHHHHHPEAM00@Z			; med_filter
PUBLIC	?oddeven@@YAXPEAM@Z				; oddeven
PUBLIC	__real@408f400000000000
PUBLIC	__real@412e848000000000
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?med_filter@@YAXHHHHHHPEAM00@Z DD imagerel $LN44@med_filter
	DD	imagerel $LN44@med_filter+47
	DD	imagerel $unwind$?med_filter@@YAXHHHHHHPEAM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?med_filter@@YAXHHHHHHPEAM00@Z DD imagerel $LN44@med_filter+47
	DD	imagerel $LN44@med_filter+325
	DD	imagerel $chain$4$?med_filter@@YAXHHHHHHPEAM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?med_filter@@YAXHHHHHHPEAM00@Z DD imagerel $LN44@med_filter+325
	DD	imagerel $LN44@med_filter+326
	DD	imagerel $chain$5$?med_filter@@YAXHHHHHHPEAM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?oddeven@@YAXPEAM@Z DD imagerel $LN144
	DD	imagerel $LN144+3880
	DD	imagerel $unwind$?oddeven@@YAXPEAM@Z
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+06
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?oddeven@@YAXPEAM@Z DD 0123f01H
	DD	0d83fH
	DD	01c83aH
	DD	02b835H
	DD	03a830H
	DD	04982bH
	DD	058826H
	DD	067821H
	DD	07681cH
	DD	011010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?med_filter@@YAXHHHHHHPEAM00@Z DD 021H
	DD	imagerel $LN44@med_filter
	DD	imagerel $LN44@med_filter+47
	DD	imagerel $unwind$?med_filter@@YAXHHHHHHPEAM00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?med_filter@@YAXHHHHHHPEAM00@Z DD 0a1c21H
	DD	014f41cH
	DD	015c418H
	DD	0167414H
	DD	01c5408H
	DD	01a3404H
	DD	imagerel $LN44@med_filter
	DD	imagerel $LN44@med_filter+47
	DD	imagerel $unwind$?med_filter@@YAXHHHHHHPEAM00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?med_filter@@YAXHHHHHHPEAM00@Z DD 042719H
	DD	0170115H
	DD	0600ce00eH
	DD	imagerel __GSHandlerCheck
	DD	090H
xdata	ENDS
; Function compile flags: /Ogtpy
; File d:\d_strabi\d dokumentumai\bme\heterogén számítási rendszerek\hf\kismacska\hetero_hf_3\heterogen_hf_cpu_batchers\heterogen_hf_szp\_src\conv_filter.cpp
;	COMDAT ?oddeven@@YAXPEAM@Z
_TEXT	SEGMENT
tomb$ = 144
?oddeven@@YAXPEAM@Z PROC				; oddeven, COMDAT

; 64   : void oddeven(float * tomb) {

$LN144:
	mov	rax, rsp
	sub	rsp, 136				; 00000088H

; 65   : 	float tmp;
; 66   : 	// 4x4
; 67   : 	cmpswap(0, 1);

	vmovss	xmm1, DWORD PTR [rcx]
	vmovss	xmm0, DWORD PTR [rcx+4]
	vcomiss	xmm1, xmm0
	vmovaps	XMMWORD PTR [rax-24], xmm6
	vmovaps	XMMWORD PTR [rax-40], xmm7
	vmovaps	XMMWORD PTR [rax-56], xmm8
	vmovaps	XMMWORD PTR [rax-72], xmm9
	vmovaps	XMMWORD PTR [rax-88], xmm10
	vmovaps	XMMWORD PTR [rax-104], xmm11
	vmovaps	XMMWORD PTR [rax-120], xmm12
	vmovaps	XMMWORD PTR [rsp], xmm13
	vmovaps	xmm2, xmm1
	jbe	SHORT $LN2@oddeven
	vmovss	DWORD PTR [rcx], xmm0
	vmovaps	xmm2, xmm0
	vmovaps	xmm0, xmm1
	vmovss	DWORD PTR [rcx+4], xmm1
$LN2@oddeven:

; 68   : 	cmpswap(2, 3);

	vmovss	xmm3, DWORD PTR [rcx+8]
	vmovss	xmm4, DWORD PTR [rcx+12]
	vcomiss	xmm3, xmm4
	vmovaps	xmm1, xmm3
	jbe	SHORT $LN3@oddeven
	vmovss	DWORD PTR [rcx+8], xmm4
	vmovaps	xmm1, xmm4
	vmovaps	xmm4, xmm3
	vmovss	DWORD PTR [rcx+12], xmm3
$LN3@oddeven:

; 69   : 	cmpswap(0, 2);

	vcomiss	xmm2, xmm1
	vmovaps	xmm3, xmm1
	jbe	SHORT $LN4@oddeven
	vmovss	DWORD PTR [rcx+8], xmm2
	vmovaps	xmm3, xmm2
	vmovaps	xmm2, xmm1
	vmovss	DWORD PTR [rcx], xmm1
$LN4@oddeven:

; 70   : 	cmpswap(1, 3);

	vcomiss	xmm0, xmm4
	jbe	SHORT $LN5@oddeven
	vmovss	DWORD PTR [rcx+12], xmm0
	vmovaps	xmm0, xmm4
	vmovss	DWORD PTR [rcx+4], xmm4
$LN5@oddeven:

; 71   : 	cmpswap(1, 2);

	vcomiss	xmm0, xmm3
	vmovaps	xmm6, xmm0
	jbe	SHORT $LN6@oddeven
	vmovss	DWORD PTR [rcx+4], xmm3
	vmovaps	xmm6, xmm3
	vmovaps	xmm3, xmm0
	vmovss	DWORD PTR [rcx+8], xmm0
$LN6@oddeven:

; 72   : 	//printf("Hello");
; 73   : 	cmpswap(4, 5);

	vmovss	xmm1, DWORD PTR [rcx+16]
	vmovss	xmm5, DWORD PTR [rcx+20]
	vcomiss	xmm1, xmm5
	vmovaps	xmm0, xmm1
	jbe	SHORT $LN7@oddeven
	vmovss	DWORD PTR [rcx+16], xmm5
	vmovaps	xmm0, xmm5
	vmovaps	xmm5, xmm1
	vmovss	DWORD PTR [rcx+20], xmm1
$LN7@oddeven:

; 74   : 	cmpswap(6, 7);

	vmovss	xmm1, DWORD PTR [rcx+24]
	vmovss	xmm4, DWORD PTR [rcx+28]
	vcomiss	xmm1, xmm4
	vmovaps	xmm7, xmm1
	jbe	SHORT $LN8@oddeven
	vmovss	DWORD PTR [rcx+24], xmm4
	vmovaps	xmm7, xmm4
	vmovaps	xmm4, xmm1
	vmovss	DWORD PTR [rcx+28], xmm1
$LN8@oddeven:

; 75   : 	cmpswap(4, 6);

	vcomiss	xmm0, xmm7
	vmovaps	xmm1, xmm7
	jbe	SHORT $LN9@oddeven
	vmovss	DWORD PTR [rcx+24], xmm0
	vmovaps	xmm1, xmm0
	vmovaps	xmm0, xmm7
	vmovss	DWORD PTR [rcx+16], xmm7
$LN9@oddeven:

; 76   : 	cmpswap(5, 7);

	vcomiss	xmm5, xmm4
	vmovaps	xmm7, xmm5
	jbe	SHORT $LN10@oddeven
	vmovss	DWORD PTR [rcx+20], xmm4
	vmovaps	xmm7, xmm4
	vmovaps	xmm4, xmm5
	vmovss	DWORD PTR [rcx+28], xmm5
$LN10@oddeven:

; 77   : 	cmpswap(5, 6);

	vcomiss	xmm7, xmm1
	vmovaps	xmm8, xmm7
	jbe	SHORT $LN11@oddeven
	vmovss	DWORD PTR [rcx+20], xmm1
	vmovaps	xmm8, xmm1
	vmovaps	xmm1, xmm7
	vmovss	DWORD PTR [rcx+24], xmm7
$LN11@oddeven:

; 78   : 
; 79   : 	cmpswap(0, 4);

	vcomiss	xmm2, xmm0
	jbe	SHORT $LN12@oddeven
	vmovss	DWORD PTR [rcx], xmm0
	vmovaps	xmm0, xmm2
	vmovss	DWORD PTR [rcx+16], xmm2
$LN12@oddeven:

; 80   : 	cmpswap(1, 5); 

	vcomiss	xmm6, xmm8
	vmovaps	xmm5, xmm8
	jbe	SHORT $LN13@oddeven
	vmovss	DWORD PTR [rcx+20], xmm6
	vmovaps	xmm5, xmm6
	vmovaps	xmm6, xmm8
	vmovss	DWORD PTR [rcx+4], xmm8
$LN13@oddeven:

; 81   : 	cmpswap(2, 6);

	vcomiss	xmm3, xmm1
	vmovaps	xmm7, xmm3
	jbe	SHORT $LN14@oddeven
	vmovss	DWORD PTR [rcx+8], xmm1
	vmovaps	xmm7, xmm1
	vmovaps	xmm1, xmm3
	vmovss	DWORD PTR [rcx+24], xmm3
$LN14@oddeven:

; 82   : 	cmpswap(3, 7);

	vmovss	xmm2, DWORD PTR [rcx+12]
	vcomiss	xmm2, xmm4
	jbe	SHORT $LN15@oddeven
	vmovss	DWORD PTR [rcx+28], xmm2
	vmovaps	xmm2, xmm4
	vmovss	DWORD PTR [rcx+12], xmm4
$LN15@oddeven:

; 83   : 
; 84   : 	cmpswap(2, 4); 

	vcomiss	xmm7, xmm0
	vmovaps	xmm4, xmm7
	jbe	SHORT $LN16@oddeven
	vmovss	DWORD PTR [rcx+8], xmm0
	vmovaps	xmm4, xmm0
	vmovaps	xmm0, xmm7
	vmovss	DWORD PTR [rcx+16], xmm7
$LN16@oddeven:

; 85   : 	cmpswap(3, 5);

	vcomiss	xmm2, xmm5
	vmovaps	xmm3, xmm2
	jbe	SHORT $LN17@oddeven
	vmovss	DWORD PTR [rcx+12], xmm5
	vmovaps	xmm3, xmm5
	vmovaps	xmm5, xmm2
	vmovss	DWORD PTR [rcx+20], xmm2
$LN17@oddeven:

; 86   : 
; 87   : 	cmpswap(1, 2);

	vcomiss	xmm6, xmm4
	jbe	SHORT $LN18@oddeven
	vmovss	DWORD PTR [rcx+8], xmm6
	vmovss	DWORD PTR [rcx+4], xmm4
$LN18@oddeven:

; 88   : 	cmpswap(3, 4);

	vcomiss	xmm3, xmm0
	jbe	SHORT $LN19@oddeven
	vmovss	DWORD PTR [rcx+16], xmm3
	vmovss	DWORD PTR [rcx+12], xmm0
$LN19@oddeven:

; 89   : 	cmpswap(5, 6);

	vcomiss	xmm5, xmm1
	jbe	SHORT $LN20@oddeven
	vmovss	DWORD PTR [rcx+24], xmm5
	vmovss	DWORD PTR [rcx+20], xmm1
$LN20@oddeven:

; 90   : 
; 91   : 	// 4x4	
; 92   : 	cmpswap(8, 9);

	vmovss	xmm2, DWORD PTR [rcx+32]
	vmovss	xmm0, DWORD PTR [rcx+36]
	vcomiss	xmm2, xmm0
	vmovaps	xmm1, xmm2
	jbe	SHORT $LN21@oddeven
	vmovss	DWORD PTR [rcx+32], xmm0
	vmovaps	xmm1, xmm0
	vmovaps	xmm0, xmm2
	vmovss	DWORD PTR [rcx+36], xmm2
$LN21@oddeven:

; 93   : 	cmpswap(10, 11);

	vmovss	xmm3, DWORD PTR [rcx+40]
	vmovss	xmm4, DWORD PTR [rcx+44]
	vcomiss	xmm3, xmm4
	vmovaps	xmm2, xmm3
	jbe	SHORT $LN22@oddeven
	vmovss	DWORD PTR [rcx+40], xmm4
	vmovaps	xmm2, xmm4
	vmovaps	xmm4, xmm3
	vmovss	DWORD PTR [rcx+44], xmm3
$LN22@oddeven:

; 94   : 	cmpswap(8, 10);

	vcomiss	xmm1, xmm2
	vmovaps	xmm3, xmm2
	jbe	SHORT $LN23@oddeven
	vmovss	DWORD PTR [rcx+40], xmm1
	vmovaps	xmm3, xmm1
	vmovaps	xmm1, xmm2
	vmovss	DWORD PTR [rcx+32], xmm2
$LN23@oddeven:

; 95   : 	cmpswap(9, 11);

	vcomiss	xmm0, xmm4
	jbe	SHORT $LN24@oddeven
	vmovss	DWORD PTR [rcx+44], xmm0
	vmovaps	xmm0, xmm4
	vmovss	DWORD PTR [rcx+36], xmm4
$LN24@oddeven:

; 96   : 	cmpswap(9, 10);

	vcomiss	xmm0, xmm3
	vmovaps	xmm7, xmm0
	jbe	SHORT $LN25@oddeven
	vmovss	DWORD PTR [rcx+36], xmm3
	vmovaps	xmm7, xmm3
	vmovaps	xmm3, xmm0
	vmovss	DWORD PTR [rcx+40], xmm0
$LN25@oddeven:

; 97   : 
; 98   : 	cmpswap(12, 13);

	vmovss	xmm0, DWORD PTR [rcx+48]
	vmovss	xmm4, DWORD PTR [rcx+52]
	vcomiss	xmm0, xmm4
	vmovaps	xmm2, xmm0
	jbe	SHORT $LN26@oddeven
	vmovss	DWORD PTR [rcx+48], xmm4
	vmovaps	xmm2, xmm4
	vmovaps	xmm4, xmm0
	vmovss	DWORD PTR [rcx+52], xmm0
$LN26@oddeven:

; 99   : 	cmpswap(14, 15);

	vmovss	xmm0, DWORD PTR [rcx+56]
	vmovss	xmm5, DWORD PTR [rcx+60]
	vcomiss	xmm0, xmm5
	vmovaps	xmm6, xmm0
	jbe	SHORT $LN27@oddeven
	vmovss	DWORD PTR [rcx+56], xmm5
	vmovaps	xmm6, xmm5
	vmovaps	xmm5, xmm0
	vmovss	DWORD PTR [rcx+60], xmm0
$LN27@oddeven:

; 100  : 	cmpswap(12, 14);

	vcomiss	xmm2, xmm6
	vmovaps	xmm0, xmm6
	jbe	SHORT $LN28@oddeven
	vmovss	DWORD PTR [rcx+56], xmm2
	vmovaps	xmm0, xmm2
	vmovaps	xmm2, xmm6
	vmovss	DWORD PTR [rcx+48], xmm6
$LN28@oddeven:

; 101  : 	cmpswap(13, 15);

	vcomiss	xmm4, xmm5
	vmovaps	xmm6, xmm4
	jbe	SHORT $LN29@oddeven
	vmovss	DWORD PTR [rcx+52], xmm5
	vmovaps	xmm6, xmm5
	vmovaps	xmm5, xmm4
	vmovss	DWORD PTR [rcx+60], xmm4
$LN29@oddeven:

; 102  : 	cmpswap(13, 14);

	vcomiss	xmm6, xmm0
	vmovaps	xmm8, xmm6
	jbe	SHORT $LN30@oddeven
	vmovss	DWORD PTR [rcx+52], xmm0
	vmovaps	xmm8, xmm0
	vmovaps	xmm0, xmm6
	vmovss	DWORD PTR [rcx+56], xmm6
$LN30@oddeven:

; 103  : 
; 104  : 	cmpswap(8, 12);

	vcomiss	xmm1, xmm2
	vmovaps	xmm4, xmm2
	jbe	SHORT $LN31@oddeven
	vmovss	DWORD PTR [rcx+48], xmm1
	vmovaps	xmm4, xmm1
	vmovaps	xmm1, xmm2
	vmovss	DWORD PTR [rcx+32], xmm2
$LN31@oddeven:

; 105  : 	cmpswap(9, 13); 

	vcomiss	xmm7, xmm8
	vmovaps	xmm6, xmm8
	jbe	SHORT $LN32@oddeven
	vmovss	DWORD PTR [rcx+52], xmm7
	vmovaps	xmm6, xmm7
	vmovaps	xmm7, xmm8
	vmovss	DWORD PTR [rcx+36], xmm8
$LN32@oddeven:

; 106  : 	cmpswap(10, 14);

	vcomiss	xmm3, xmm0
	vmovaps	xmm8, xmm3
	jbe	SHORT $LN33@oddeven
	vmovss	DWORD PTR [rcx+40], xmm0
	vmovaps	xmm8, xmm0
	vmovaps	xmm0, xmm3
	vmovss	DWORD PTR [rcx+56], xmm3
$LN33@oddeven:

; 107  : 	cmpswap(11, 15);

	vmovss	xmm3, DWORD PTR [rcx+44]
	vcomiss	xmm3, xmm5
	jbe	SHORT $LN34@oddeven
	vmovss	DWORD PTR [rcx+60], xmm3
	vmovaps	xmm3, xmm5
	vmovss	DWORD PTR [rcx+44], xmm5
$LN34@oddeven:

; 108  : 
; 109  : 	cmpswap(10, 12); 

	vcomiss	xmm8, xmm4
	vmovaps	xmm2, xmm8
	jbe	SHORT $LN35@oddeven
	vmovss	DWORD PTR [rcx+40], xmm4
	vmovaps	xmm2, xmm4
	vmovaps	xmm4, xmm8
	vmovss	DWORD PTR [rcx+48], xmm8
$LN35@oddeven:

; 110  : 	cmpswap(11, 13);

	vcomiss	xmm3, xmm6
	vmovaps	xmm5, xmm3
	jbe	SHORT $LN36@oddeven
	vmovss	DWORD PTR [rcx+44], xmm6
	vmovaps	xmm5, xmm6
	vmovaps	xmm6, xmm3
	vmovss	DWORD PTR [rcx+52], xmm3
$LN36@oddeven:

; 111  : 
; 112  : 	cmpswap(9, 10);

	vcomiss	xmm7, xmm2
	vmovaps	xmm8, xmm7
	jbe	SHORT $LN37@oddeven
	vmovss	DWORD PTR [rcx+36], xmm2
	vmovaps	xmm8, xmm2
	vmovaps	xmm2, xmm7
	vmovss	DWORD PTR [rcx+40], xmm7
$LN37@oddeven:

; 113  : 	cmpswap(11, 12);

	vcomiss	xmm5, xmm4
	vmovaps	xmm7, xmm5
	jbe	SHORT $LN38@oddeven
	vmovss	DWORD PTR [rcx+44], xmm4
	vmovaps	xmm7, xmm4
	vmovaps	xmm4, xmm5
	vmovss	DWORD PTR [rcx+48], xmm5
$LN38@oddeven:

; 114  : 	cmpswap(13, 14);

	vcomiss	xmm6, xmm0
	vmovaps	xmm5, xmm6
	jbe	SHORT $LN39@oddeven
	vmovss	DWORD PTR [rcx+52], xmm0
	vmovaps	xmm5, xmm0
	vmovaps	xmm0, xmm6
	vmovss	DWORD PTR [rcx+56], xmm6
$LN39@oddeven:

; 115  : 
; 116  : 
; 117  : 	cmpswap(0, 8); 

	vmovss	xmm3, DWORD PTR [rcx]
	vcomiss	xmm3, xmm1
	jbe	SHORT $LN40@oddeven
	vmovss	DWORD PTR [rcx], xmm1
	vmovaps	xmm1, xmm3
	vmovss	DWORD PTR [rcx+32], xmm3
$LN40@oddeven:

; 118  : 	cmpswap(1, 9); 

	vmovss	xmm3, DWORD PTR [rcx+4]
	vcomiss	xmm3, xmm8
	jbe	SHORT $LN41@oddeven
	vmovss	DWORD PTR [rcx+4], xmm8
	vmovaps	xmm8, xmm3
	vmovss	DWORD PTR [rcx+36], xmm3
$LN41@oddeven:

; 119  : 	cmpswap(2, 10); 

	vmovss	xmm3, DWORD PTR [rcx+8]
	vcomiss	xmm3, xmm2
	jbe	SHORT $LN42@oddeven
	vmovss	DWORD PTR [rcx+8], xmm2
	vmovaps	xmm2, xmm3
	vmovss	DWORD PTR [rcx+40], xmm3
$LN42@oddeven:

; 120  : 	cmpswap(3, 11); 

	vmovss	xmm3, DWORD PTR [rcx+12]
	vcomiss	xmm3, xmm7
	jbe	SHORT $LN43@oddeven
	vmovss	DWORD PTR [rcx+12], xmm7
	vmovaps	xmm7, xmm3
	vmovss	DWORD PTR [rcx+44], xmm3
$LN43@oddeven:

; 121  : 	cmpswap(4, 12); 

	vmovss	xmm3, DWORD PTR [rcx+16]
	vcomiss	xmm3, xmm4
	jbe	SHORT $LN44@oddeven
	vmovss	DWORD PTR [rcx+48], xmm3
	vmovaps	xmm3, xmm4
	vmovss	DWORD PTR [rcx+16], xmm4
$LN44@oddeven:

; 122  : 	cmpswap(5, 13); 

	vmovss	xmm4, DWORD PTR [rcx+20]
	vcomiss	xmm4, xmm5
	jbe	SHORT $LN45@oddeven
	vmovss	DWORD PTR [rcx+52], xmm4
	vmovaps	xmm4, xmm5
	vmovss	DWORD PTR [rcx+20], xmm5
$LN45@oddeven:

; 123  : 	cmpswap(6, 14); 

	vmovss	xmm5, DWORD PTR [rcx+24]
	vcomiss	xmm5, xmm0
	jbe	SHORT $LN46@oddeven
	vmovss	DWORD PTR [rcx+56], xmm5
	vmovaps	xmm5, xmm0
	vmovss	DWORD PTR [rcx+24], xmm0
$LN46@oddeven:

; 124  : 	cmpswap(7, 15); 

	vmovss	xmm0, DWORD PTR [rcx+28]
	vmovss	xmm6, DWORD PTR [rcx+60]
	vcomiss	xmm0, xmm6
	jbe	SHORT $LN47@oddeven
	vmovss	DWORD PTR [rcx+60], xmm0
	vmovaps	xmm0, xmm6
	vmovss	DWORD PTR [rcx+28], xmm6
$LN47@oddeven:

; 125  : 
; 126  : 
; 127  : 	cmpswap(4, 8); 

	vcomiss	xmm3, xmm1
	vmovaps	xmm6, xmm3
	jbe	SHORT $LN48@oddeven
	vmovss	DWORD PTR [rcx+16], xmm1
	vmovaps	xmm6, xmm1
	vmovaps	xmm1, xmm3
	vmovss	DWORD PTR [rcx+32], xmm3
$LN48@oddeven:

; 128  : 	cmpswap(5, 9); 

	vcomiss	xmm4, xmm8
	vmovaps	xmm9, xmm4
	jbe	SHORT $LN49@oddeven
	vmovss	DWORD PTR [rcx+20], xmm8
	vmovaps	xmm9, xmm8
	vmovaps	xmm8, xmm4
	vmovss	DWORD PTR [rcx+36], xmm4
$LN49@oddeven:

; 129  : 	cmpswap(6, 10); 

	vcomiss	xmm5, xmm2
	vmovaps	xmm3, xmm5
	jbe	SHORT $LN50@oddeven
	vmovss	DWORD PTR [rcx+24], xmm2
	vmovaps	xmm3, xmm2
	vmovaps	xmm2, xmm5
	vmovss	DWORD PTR [rcx+40], xmm5
$LN50@oddeven:

; 130  : 	cmpswap(7, 11); 

	vcomiss	xmm0, xmm7
	vmovaps	xmm4, xmm0
	jbe	SHORT $LN51@oddeven
	vmovss	DWORD PTR [rcx+28], xmm7
	vmovaps	xmm4, xmm7
	vmovaps	xmm7, xmm0
	vmovss	DWORD PTR [rcx+44], xmm0
$LN51@oddeven:

; 131  : 
; 132  : 	cmpswap(2, 4); 

	vmovss	xmm0, DWORD PTR [rcx+8]
	vcomiss	xmm0, xmm6
	vmovaps	xmm13, xmm0
	jbe	SHORT $LN52@oddeven
	vmovss	DWORD PTR [rcx+8], xmm6
	vmovaps	xmm13, xmm6
	vmovaps	xmm6, xmm0
	vmovss	DWORD PTR [rcx+16], xmm0
$LN52@oddeven:

; 133  : 	cmpswap(3, 5); 

	vmovss	xmm0, DWORD PTR [rcx+12]
	vcomiss	xmm0, xmm9
	vmovaps	xmm12, xmm0
	jbe	SHORT $LN53@oddeven
	vmovss	DWORD PTR [rcx+12], xmm9
	vmovaps	xmm12, xmm9
	vmovaps	xmm9, xmm0
	vmovss	DWORD PTR [rcx+20], xmm0
$LN53@oddeven:

; 134  : 	cmpswap(6, 8);

	vcomiss	xmm3, xmm1
	vmovaps	xmm11, xmm3
	jbe	SHORT $LN54@oddeven
	vmovss	DWORD PTR [rcx+24], xmm1
	vmovaps	xmm11, xmm1
	vmovaps	xmm1, xmm3
	vmovss	DWORD PTR [rcx+32], xmm3
$LN54@oddeven:

; 135  : 	cmpswap(7, 9);

	vcomiss	xmm4, xmm8
	vmovaps	xmm10, xmm4
	jbe	SHORT $LN55@oddeven
	vmovss	DWORD PTR [rcx+28], xmm8
	vmovaps	xmm10, xmm8
	vmovaps	xmm8, xmm4
	vmovss	DWORD PTR [rcx+36], xmm4
$LN55@oddeven:

; 136  : 	cmpswap(10, 12); 

	vmovss	xmm0, DWORD PTR [rcx+48]
	vcomiss	xmm2, xmm0
	vmovaps	xmm4, xmm2
	jbe	SHORT $LN56@oddeven
	vmovss	DWORD PTR [rcx+40], xmm0
	vmovaps	xmm4, xmm0
	vmovaps	xmm0, xmm2
	vmovss	DWORD PTR [rcx+48], xmm2
$LN56@oddeven:

; 137  : 	cmpswap(11, 13); 

	vmovss	xmm2, DWORD PTR [rcx+52]
	vcomiss	xmm7, xmm2
	vmovaps	xmm3, xmm7
	jbe	SHORT $LN57@oddeven
	vmovss	DWORD PTR [rcx+44], xmm2
	vmovaps	xmm3, xmm2
	vmovaps	xmm2, xmm7
	vmovss	DWORD PTR [rcx+52], xmm7
$LN57@oddeven:

; 138  : 
; 139  : 	cmpswap(1, 2); 

	vmovss	xmm5, DWORD PTR [rcx+4]
	vcomiss	xmm5, xmm13
	jbe	SHORT $LN58@oddeven
	vmovss	DWORD PTR [rcx+8], xmm5
	vmovss	DWORD PTR [rcx+4], xmm13
$LN58@oddeven:

; 140  : 	cmpswap(3, 4); 

	vcomiss	xmm12, xmm6
	jbe	SHORT $LN59@oddeven
	vmovss	DWORD PTR [rcx+16], xmm12
	vmovss	DWORD PTR [rcx+12], xmm6
$LN59@oddeven:

; 141  : 	cmpswap(5, 6); 

	vcomiss	xmm9, xmm11
	jbe	SHORT $LN60@oddeven
	vmovss	DWORD PTR [rcx+24], xmm9
	vmovss	DWORD PTR [rcx+20], xmm11
$LN60@oddeven:

; 142  : 	cmpswap(7, 8); 

	vcomiss	xmm10, xmm1
	jbe	SHORT $LN61@oddeven
	vmovss	DWORD PTR [rcx+32], xmm10
	vmovss	DWORD PTR [rcx+28], xmm1
$LN61@oddeven:

; 143  : 	cmpswap(9, 10); 

	vcomiss	xmm8, xmm4
	jbe	SHORT $LN62@oddeven
	vmovss	DWORD PTR [rcx+40], xmm8
	vmovss	DWORD PTR [rcx+36], xmm4
$LN62@oddeven:

; 144  : 	cmpswap(11, 12); 

	vcomiss	xmm3, xmm0
	jbe	SHORT $LN63@oddeven
	vmovss	DWORD PTR [rcx+48], xmm3
	vmovss	DWORD PTR [rcx+44], xmm0
$LN63@oddeven:

; 145  : 	cmpswap(13, 14); 

	vmovss	xmm0, DWORD PTR [rcx+56]
	vcomiss	xmm2, xmm0
	jbe	SHORT $LN64@oddeven
	vmovss	DWORD PTR [rcx+56], xmm2
	vmovss	DWORD PTR [rcx+52], xmm0
$LN64@oddeven:

; 146  : 
; 147  : // Eddig 8x8-as (16 bemenet)
; 148  : 
; 149  : 	//4x4
; 150  : 	cmpswap(16, 17);

	vmovss	xmm0, DWORD PTR [rcx+64]
	vmovss	xmm1, DWORD PTR [rcx+68]
	vcomiss	xmm0, xmm1
	vmovaps	xmm10, xmm0
	jbe	SHORT $LN65@oddeven
	vmovss	DWORD PTR [rcx+64], xmm1
	vmovaps	xmm10, xmm1
	vmovaps	xmm1, xmm0
	vmovss	DWORD PTR [rcx+68], xmm0
$LN65@oddeven:

; 151  : 	cmpswap(18, 19);

	vmovss	xmm0, DWORD PTR [rcx+72]
	vmovss	xmm3, DWORD PTR [rcx+76]
	vcomiss	xmm0, xmm3
	vmovaps	xmm2, xmm0
	jbe	SHORT $LN66@oddeven
	vmovss	DWORD PTR [rcx+72], xmm3
	vmovaps	xmm2, xmm3
	vmovaps	xmm3, xmm0
	vmovss	DWORD PTR [rcx+76], xmm0
$LN66@oddeven:

; 152  : 	cmpswap(20, 21);

	vmovss	xmm0, DWORD PTR [rcx+80]
	vmovss	xmm6, DWORD PTR [rcx+84]
	vcomiss	xmm0, xmm6
	vmovaps	xmm5, xmm0
	jbe	SHORT $LN67@oddeven
	vmovss	DWORD PTR [rcx+80], xmm6
	vmovaps	xmm5, xmm6
	vmovaps	xmm6, xmm0
	vmovss	DWORD PTR [rcx+84], xmm0
$LN67@oddeven:

; 153  : 	cmpswap(22, 23);

	vmovss	xmm4, DWORD PTR [rcx+88]
	vmovss	xmm9, DWORD PTR [rcx+92]
	vcomiss	xmm4, xmm9
	vmovaps	xmm0, xmm4
	jbe	SHORT $LN68@oddeven
	vmovaps	xmm0, xmm9
	vmovss	DWORD PTR [rcx+88], xmm0
	vmovss	DWORD PTR [rcx+92], xmm4
	vmovaps	xmm9, xmm4
$LN68@oddeven:

; 154  : 
; 155  : 	cmpswap(16, 18);

	vcomiss	xmm10, xmm2
	vmovaps	xmm7, xmm2
	jbe	SHORT $LN69@oddeven
	vmovss	DWORD PTR [rcx+72], xmm10
	vmovaps	xmm7, xmm10
	vmovaps	xmm10, xmm2
	vmovss	DWORD PTR [rcx+64], xmm2
$LN69@oddeven:

; 156  : 	cmpswap(20, 22);

	vcomiss	xmm5, xmm0
	vmovaps	xmm8, xmm0
	jbe	SHORT $LN70@oddeven
	vmovss	DWORD PTR [rcx+88], xmm5
	vmovaps	xmm8, xmm5
	vmovaps	xmm5, xmm0
	vmovss	DWORD PTR [rcx+80], xmm0
$LN70@oddeven:

; 157  : 	cmpswap(17, 19);

	vcomiss	xmm1, xmm3
	vmovaps	xmm0, xmm1
	jbe	SHORT $LN71@oddeven
	vmovss	DWORD PTR [rcx+68], xmm3
	vmovaps	xmm0, xmm3
	vmovaps	xmm3, xmm1
	vmovss	DWORD PTR [rcx+76], xmm1
$LN71@oddeven:

; 158  : 	cmpswap(21, 23);

	vcomiss	xmm6, xmm9
	vmovaps	xmm1, xmm6
	jbe	SHORT $LN72@oddeven
	vmovss	DWORD PTR [rcx+84], xmm9
	vmovaps	xmm1, xmm9
	vmovaps	xmm9, xmm6
	vmovss	DWORD PTR [rcx+92], xmm6
$LN72@oddeven:

; 159  : 
; 160  : 	cmpswap(17, 18);

	vcomiss	xmm0, xmm7
	vmovaps	xmm6, xmm0
	jbe	SHORT $LN73@oddeven
	vmovss	DWORD PTR [rcx+68], xmm7
	vmovaps	xmm6, xmm7
	vmovaps	xmm7, xmm0
	vmovss	DWORD PTR [rcx+72], xmm0
$LN73@oddeven:

; 161  : 	cmpswap(21, 22);

	vcomiss	xmm1, xmm8
	vmovaps	xmm0, xmm1
	jbe	SHORT $LN74@oddeven
	vmovss	DWORD PTR [rcx+84], xmm8
	vmovaps	xmm0, xmm8
	vmovaps	xmm8, xmm1
	vmovss	DWORD PTR [rcx+88], xmm1
$LN74@oddeven:

; 162  : 
; 163  : 
; 164  : 	cmpswap(16, 20);

	vcomiss	xmm10, xmm5
	vmovaps	xmm4, xmm5
	jbe	SHORT $LN75@oddeven
	vmovss	DWORD PTR [rcx+80], xmm10
	vmovaps	xmm4, xmm10
	vmovaps	xmm10, xmm5
	vmovss	DWORD PTR [rcx+64], xmm5
$LN75@oddeven:

; 165  : 	cmpswap(17, 21);

	vcomiss	xmm6, xmm0
	vmovaps	xmm2, xmm0
	jbe	SHORT $LN76@oddeven
	vmovss	DWORD PTR [rcx+84], xmm6
	vmovaps	xmm2, xmm6
	vmovaps	xmm6, xmm0
	vmovss	DWORD PTR [rcx+68], xmm0
$LN76@oddeven:

; 166  : 	cmpswap(18, 22);

	vcomiss	xmm7, xmm8
	vmovaps	xmm1, xmm7
	jbe	SHORT $LN77@oddeven
	vmovss	DWORD PTR [rcx+72], xmm8
	vmovaps	xmm1, xmm8
	vmovaps	xmm8, xmm7
	vmovss	DWORD PTR [rcx+88], xmm7
$LN77@oddeven:

; 167  : 	cmpswap(19, 23);

	vcomiss	xmm3, xmm9
	jbe	SHORT $LN78@oddeven
	vmovss	DWORD PTR [rcx+92], xmm3
	vmovaps	xmm3, xmm9
	vmovss	DWORD PTR [rcx+76], xmm9
$LN78@oddeven:

; 168  : 
; 169  : 	cmpswap(18, 20);

	vcomiss	xmm1, xmm4
	vmovaps	xmm0, xmm1
	jbe	SHORT $LN79@oddeven
	vmovss	DWORD PTR [rcx+72], xmm4
	vmovaps	xmm0, xmm4
	vmovaps	xmm4, xmm1
	vmovss	DWORD PTR [rcx+80], xmm1
$LN79@oddeven:

; 170  : 	cmpswap(19, 21);

	vcomiss	xmm3, xmm2
	vmovaps	xmm1, xmm3
	jbe	SHORT $LN80@oddeven
	vmovss	DWORD PTR [rcx+76], xmm2
	vmovaps	xmm1, xmm2
	vmovaps	xmm2, xmm3
	vmovss	DWORD PTR [rcx+84], xmm3
$LN80@oddeven:

; 171  : 
; 172  : 	cmpswap(17, 18);

	vcomiss	xmm6, xmm0
	vmovaps	xmm5, xmm0
	jbe	SHORT $LN81@oddeven
	vmovss	DWORD PTR [rcx+72], xmm6
	vmovaps	xmm5, xmm6
	vmovaps	xmm6, xmm0
	vmovss	DWORD PTR [rcx+68], xmm0
$LN81@oddeven:

; 173  : 	cmpswap(19, 20);

	vcomiss	xmm1, xmm4
	vmovaps	xmm3, xmm4
	jbe	SHORT $LN82@oddeven
	vmovss	DWORD PTR [rcx+80], xmm1
	vmovaps	xmm3, xmm1
	vmovaps	xmm1, xmm4
	vmovss	DWORD PTR [rcx+76], xmm4
$LN82@oddeven:

; 174  : 	cmpswap(21, 22);

	vcomiss	xmm2, xmm8
	vmovaps	xmm4, xmm2
	jbe	SHORT $LN83@oddeven
	vmovss	DWORD PTR [rcx+84], xmm8
	vmovaps	xmm4, xmm8
	vmovaps	xmm8, xmm2
	vmovss	DWORD PTR [rcx+88], xmm2
$LN83@oddeven:

; 175  : 
; 176  : 
; 177  : 	cmpswap(16, 24);

	vmovss	xmm2, DWORD PTR [rcx+96]
	vcomiss	xmm10, xmm2
	jbe	SHORT $LN84@oddeven
	vmovaps	xmm0, xmm2
	vmovss	DWORD PTR [rcx+64], xmm2
	vmovaps	xmm2, xmm10
	vmovss	DWORD PTR [rcx+96], xmm10
	vmovaps	xmm10, xmm0
$LN84@oddeven:

; 178  : 
; 179  : 	cmpswap(20, 24);

	vcomiss	xmm3, xmm2
	vmovaps	xmm7, xmm3
	jbe	SHORT $LN85@oddeven
	vmovss	DWORD PTR [rcx+80], xmm2
	vmovaps	xmm7, xmm2
	vmovaps	xmm2, xmm3
	vmovss	DWORD PTR [rcx+96], xmm3
$LN85@oddeven:

; 180  : 
; 181  : 	cmpswap(18, 20);

	vcomiss	xmm5, xmm7
	vmovaps	xmm9, xmm5
	jbe	SHORT $LN86@oddeven
	vmovss	DWORD PTR [rcx+72], xmm7
	vmovaps	xmm9, xmm7
	vmovaps	xmm7, xmm5
	vmovss	DWORD PTR [rcx+80], xmm5
$LN86@oddeven:

; 182  : 	cmpswap(19, 21);

	vcomiss	xmm1, xmm4
	vmovaps	xmm0, xmm1
	jbe	SHORT $LN87@oddeven
	vmovss	DWORD PTR [rcx+76], xmm4
	vmovaps	xmm0, xmm4
	vmovaps	xmm4, xmm1
	vmovss	DWORD PTR [rcx+84], xmm1
$LN87@oddeven:

; 183  : 	cmpswap(22, 24);

	vcomiss	xmm8, xmm2
	vmovaps	xmm11, xmm8
	jbe	SHORT $LN88@oddeven
	vmovss	DWORD PTR [rcx+88], xmm2
	vmovaps	xmm11, xmm2
	vmovaps	xmm2, xmm8
	vmovss	DWORD PTR [rcx+96], xmm8
$LN88@oddeven:

; 184  : 
; 185  : 	//cmpswap(19, 21);
; 186  : 	cmpswap(17, 18);

	vcomiss	xmm6, xmm9
	vmovaps	xmm3, xmm6
	jbe	SHORT $LN89@oddeven
	vmovss	DWORD PTR [rcx+68], xmm9
	vmovaps	xmm3, xmm9
	vmovaps	xmm9, xmm6
	vmovss	DWORD PTR [rcx+72], xmm6
$LN89@oddeven:

; 187  : 	cmpswap(19, 20);

	vcomiss	xmm0, xmm7
	vmovaps	xmm5, xmm0
	jbe	SHORT $LN90@oddeven
	vmovss	DWORD PTR [rcx+76], xmm7
	vmovaps	xmm5, xmm7
	vmovaps	xmm7, xmm0
	vmovss	DWORD PTR [rcx+80], xmm0
$LN90@oddeven:

; 188  : 	cmpswap(21, 22);

	vcomiss	xmm4, xmm11
	vmovaps	xmm6, xmm4
	jbe	SHORT $LN91@oddeven
	vmovss	DWORD PTR [rcx+84], xmm11
	vmovaps	xmm6, xmm11
	vmovaps	xmm11, xmm4
	vmovss	DWORD PTR [rcx+88], xmm4
$LN91@oddeven:

; 189  : 	cmpswap(23, 24);

	vmovss	xmm0, DWORD PTR [rcx+92]
	vcomiss	xmm0, xmm2
	vmovaps	xmm4, xmm0
	jbe	SHORT $LN92@oddeven
	vmovss	DWORD PTR [rcx+92], xmm2
	vmovaps	xmm4, xmm2
	vmovaps	xmm2, xmm0
	vmovss	DWORD PTR [rcx+96], xmm0
$LN92@oddeven:

; 190  : 	//Eddig egy 8x8-as (De ez csak 9 bemenet)
; 191  : 
; 192  : // 16x16 
; 193  : 	cmpswap(0, 16);

	vmovss	xmm0, DWORD PTR [rcx]
	vcomiss	xmm0, xmm10
	jbe	SHORT $LN93@oddeven
	vmovss	DWORD PTR [rcx], xmm10
	vmovaps	xmm10, xmm0
	vmovss	DWORD PTR [rcx+64], xmm0
$LN93@oddeven:

; 194  : 	cmpswap(1, 17);

	vmovss	xmm0, DWORD PTR [rcx+4]
	vcomiss	xmm0, xmm3
	jbe	SHORT $LN94@oddeven
	vmovss	DWORD PTR [rcx+4], xmm3
	vmovaps	xmm3, xmm0
	vmovss	DWORD PTR [rcx+68], xmm0
$LN94@oddeven:

; 195  : 	cmpswap(2, 18);

	vmovss	xmm0, DWORD PTR [rcx+8]
	vcomiss	xmm0, xmm9
	jbe	SHORT $LN95@oddeven
	vmovss	DWORD PTR [rcx+8], xmm9
	vmovaps	xmm9, xmm0
	vmovss	DWORD PTR [rcx+72], xmm0
$LN95@oddeven:

; 196  : 	cmpswap(3, 19);

	vmovss	xmm0, DWORD PTR [rcx+12]
	vcomiss	xmm0, xmm5
	jbe	SHORT $LN96@oddeven
	vmovss	DWORD PTR [rcx+12], xmm5
	vmovaps	xmm5, xmm0
	vmovss	DWORD PTR [rcx+76], xmm0
$LN96@oddeven:

; 197  : 	cmpswap(4, 20);

	vmovss	xmm0, DWORD PTR [rcx+16]
	vcomiss	xmm0, xmm7
	jbe	SHORT $LN97@oddeven
	vmovss	DWORD PTR [rcx+16], xmm7
	vmovaps	xmm7, xmm0
	vmovss	DWORD PTR [rcx+80], xmm0
$LN97@oddeven:

; 198  : 	cmpswap(5, 21);

	vmovss	xmm0, DWORD PTR [rcx+20]
	vcomiss	xmm0, xmm6
	jbe	SHORT $LN98@oddeven
	vmovss	DWORD PTR [rcx+20], xmm6
	vmovaps	xmm6, xmm0
	vmovss	DWORD PTR [rcx+84], xmm0
$LN98@oddeven:

; 199  : 	cmpswap(6, 22);

	vmovss	xmm0, DWORD PTR [rcx+24]
	vcomiss	xmm0, xmm11
	jbe	SHORT $LN99@oddeven
	vmovss	DWORD PTR [rcx+24], xmm11
	vmovaps	xmm11, xmm0
	vmovss	DWORD PTR [rcx+88], xmm0
$LN99@oddeven:

; 200  : 	cmpswap(7, 23);

	vmovss	xmm0, DWORD PTR [rcx+28]
	vcomiss	xmm0, xmm4
	jbe	SHORT $LN100@oddeven
	vmovss	DWORD PTR [rcx+28], xmm4
	vmovaps	xmm4, xmm0
	vmovss	DWORD PTR [rcx+92], xmm0
$LN100@oddeven:

; 201  : 	cmpswap(8, 24);

	vmovss	xmm0, DWORD PTR [rcx+32]
	vcomiss	xmm0, xmm2
	jbe	SHORT $LN101@oddeven
	vmovss	DWORD PTR [rcx+96], xmm0
	vmovaps	xmm0, xmm2
	vmovss	DWORD PTR [rcx+32], xmm2
$LN101@oddeven:

; 202  : 
; 203  : 
; 204  : 	cmpswap(8, 16);

	vcomiss	xmm0, xmm10
	jbe	SHORT $LN102@oddeven
	vmovss	DWORD PTR [rcx+64], xmm0
	vmovaps	xmm0, xmm10
	vmovss	DWORD PTR [rcx+32], xmm10
$LN102@oddeven:

; 205  : 	cmpswap(9, 17);

	vmovss	xmm1, DWORD PTR [rcx+36]
	vcomiss	xmm1, xmm3
	jbe	SHORT $LN103@oddeven
	vmovss	DWORD PTR [rcx+68], xmm1
	vmovaps	xmm1, xmm3
	vmovss	DWORD PTR [rcx+36], xmm3
$LN103@oddeven:

; 206  : 	cmpswap(10, 18);

	vmovss	xmm2, DWORD PTR [rcx+40]
	vcomiss	xmm2, xmm9
	jbe	SHORT $LN104@oddeven
	vmovss	DWORD PTR [rcx+72], xmm2
	vmovaps	xmm2, xmm9
	vmovss	DWORD PTR [rcx+40], xmm9
$LN104@oddeven:

; 207  : 	cmpswap(11, 19);

	vmovss	xmm3, DWORD PTR [rcx+44]
	vcomiss	xmm3, xmm5
	jbe	SHORT $LN105@oddeven
	vmovss	DWORD PTR [rcx+76], xmm3
	vmovaps	xmm3, xmm5
	vmovss	DWORD PTR [rcx+44], xmm5
$LN105@oddeven:

; 208  : 	cmpswap(12, 20);

	vmovss	xmm10, DWORD PTR [rcx+48]
	vcomiss	xmm10, xmm7
	jbe	SHORT $LN106@oddeven
	vmovss	DWORD PTR [rcx+80], xmm10
	vmovaps	xmm10, xmm7
	vmovss	DWORD PTR [rcx+48], xmm7
$LN106@oddeven:

; 209  : 	cmpswap(13, 21);

	vmovss	xmm9, DWORD PTR [rcx+52]
	vcomiss	xmm9, xmm6
	jbe	SHORT $LN107@oddeven
	vmovss	DWORD PTR [rcx+84], xmm9
	vmovaps	xmm9, xmm6
	vmovss	DWORD PTR [rcx+52], xmm6
$LN107@oddeven:

; 210  : 	cmpswap(14, 22);

	vmovss	xmm8, DWORD PTR [rcx+56]
	vcomiss	xmm8, xmm11
	jbe	SHORT $LN108@oddeven
	vmovss	DWORD PTR [rcx+88], xmm8
	vmovaps	xmm8, xmm11
	vmovss	DWORD PTR [rcx+56], xmm11
$LN108@oddeven:

; 211  : 	cmpswap(15, 23);

	vmovss	xmm7, DWORD PTR [rcx+60]
	vcomiss	xmm7, xmm4
	jbe	SHORT $LN109@oddeven
	vmovss	DWORD PTR [rcx+92], xmm7
	vmovaps	xmm7, xmm4
	vmovss	DWORD PTR [rcx+60], xmm4
$LN109@oddeven:

; 212  : 
; 213  : 
; 214  : 	cmpswap(4, 8);

	vmovss	xmm6, DWORD PTR [rcx+16]
	vcomiss	xmm6, xmm0
	jbe	SHORT $LN110@oddeven
	vmovss	DWORD PTR [rcx+32], xmm6
	vmovaps	xmm6, xmm0
	vmovss	DWORD PTR [rcx+16], xmm0
$LN110@oddeven:

; 215  : 	cmpswap(5, 9);

	vmovss	xmm5, DWORD PTR [rcx+20]
	vcomiss	xmm5, xmm1
	jbe	SHORT $LN111@oddeven
	vmovss	DWORD PTR [rcx+36], xmm5
	vmovaps	xmm5, xmm1
	vmovss	DWORD PTR [rcx+20], xmm1
$LN111@oddeven:

; 216  : 	cmpswap(6, 10);

	vmovss	xmm4, DWORD PTR [rcx+24]
	vcomiss	xmm4, xmm2
	jbe	SHORT $LN112@oddeven
	vmovss	DWORD PTR [rcx+40], xmm4
	vmovaps	xmm4, xmm2
	vmovss	DWORD PTR [rcx+24], xmm2
$LN112@oddeven:

; 217  : 	cmpswap(7, 11);

	vmovss	xmm2, DWORD PTR [rcx+28]
	vcomiss	xmm2, xmm3
	jbe	SHORT $LN113@oddeven
	vmovss	DWORD PTR [rcx+44], xmm2
	vmovaps	xmm2, xmm3
	vmovss	DWORD PTR [rcx+28], xmm3
$LN113@oddeven:

; 218  : 
; 219  : 	cmpswap(12, 16);

	vmovss	xmm0, DWORD PTR [rcx+64]
	vcomiss	xmm10, xmm0
	jbe	SHORT $LN114@oddeven
	vmovss	DWORD PTR [rcx+64], xmm10
	vmovaps	xmm10, xmm0
	vmovss	DWORD PTR [rcx+48], xmm0
$LN114@oddeven:

; 220  : 	cmpswap(13, 17);

	vmovss	xmm0, DWORD PTR [rcx+68]
	vcomiss	xmm9, xmm0
	jbe	SHORT $LN115@oddeven
	vmovss	DWORD PTR [rcx+68], xmm9
	vmovaps	xmm9, xmm0
	vmovss	DWORD PTR [rcx+52], xmm0
$LN115@oddeven:

; 221  : 	cmpswap(14, 18);

	vmovss	xmm0, DWORD PTR [rcx+72]
	vcomiss	xmm8, xmm0
	jbe	SHORT $LN116@oddeven
	vmovss	DWORD PTR [rcx+72], xmm8
	vmovaps	xmm8, xmm0
	vmovss	DWORD PTR [rcx+56], xmm0
$LN116@oddeven:

; 222  : 	cmpswap(15, 19);

	vmovss	xmm0, DWORD PTR [rcx+76]
	vcomiss	xmm7, xmm0
	jbe	SHORT $LN117@oddeven
	vmovss	DWORD PTR [rcx+76], xmm7
	vmovaps	xmm7, xmm0
	vmovss	DWORD PTR [rcx+60], xmm0
$LN117@oddeven:

; 223  : 
; 224  : 	cmpswap(20, 21);

	vmovss	xmm1, DWORD PTR [rcx+80]
	vmovss	xmm0, DWORD PTR [rcx+84]
	vcomiss	xmm1, xmm0
	jbe	SHORT $LN118@oddeven
	vmovss	DWORD PTR [rcx+84], xmm1
	vmovaps	xmm1, xmm0
	vmovss	DWORD PTR [rcx+80], xmm0
$LN118@oddeven:

; 225  : 
; 226  : 
; 227  : 	cmpswap(2, 4);

	vmovss	xmm0, DWORD PTR [rcx+8]
	vcomiss	xmm0, xmm6
	jbe	SHORT $LN119@oddeven
	vmovss	DWORD PTR [rcx+16], xmm0
	vmovss	DWORD PTR [rcx+8], xmm6
$LN119@oddeven:

; 228  : 	cmpswap(3, 5);

	vmovss	xmm0, DWORD PTR [rcx+12]
	vcomiss	xmm0, xmm5
	jbe	SHORT $LN120@oddeven
	vmovss	DWORD PTR [rcx+20], xmm0
	vmovss	DWORD PTR [rcx+12], xmm5
$LN120@oddeven:

; 229  : 	cmpswap(6, 8);

	vmovss	xmm0, DWORD PTR [rcx+32]
	vcomiss	xmm4, xmm0
	jbe	SHORT $LN121@oddeven
	vmovss	DWORD PTR [rcx+32], xmm4
	vmovss	DWORD PTR [rcx+24], xmm0
$LN121@oddeven:

; 230  : 	cmpswap(7, 9);

	vmovss	xmm0, DWORD PTR [rcx+36]
	vcomiss	xmm2, xmm0
	jbe	SHORT $LN122@oddeven
	vmovss	DWORD PTR [rcx+36], xmm2
	vmovss	DWORD PTR [rcx+28], xmm0
$LN122@oddeven:

; 231  : 	cmpswap(10, 12);

	vmovss	xmm0, DWORD PTR [rcx+40]
	vcomiss	xmm0, xmm10
	jbe	SHORT $LN123@oddeven
	vmovss	DWORD PTR [rcx+48], xmm0
	vmovss	DWORD PTR [rcx+40], xmm10
$LN123@oddeven:

; 232  : 	cmpswap(11, 13);

	vmovss	xmm0, DWORD PTR [rcx+44]
	vcomiss	xmm0, xmm9
	jbe	SHORT $LN124@oddeven
	vmovss	DWORD PTR [rcx+52], xmm0
	vmovss	DWORD PTR [rcx+44], xmm9
$LN124@oddeven:

; 233  : 	cmpswap(14, 16);

	vmovss	xmm0, DWORD PTR [rcx+64]
	vcomiss	xmm8, xmm0
	jbe	SHORT $LN125@oddeven
	vmovss	DWORD PTR [rcx+64], xmm8
	vmovss	DWORD PTR [rcx+56], xmm0
$LN125@oddeven:

; 234  : 	cmpswap(15, 17);

	vmovss	xmm0, DWORD PTR [rcx+68]
	vcomiss	xmm7, xmm0
	jbe	SHORT $LN126@oddeven
	vmovss	DWORD PTR [rcx+68], xmm7
	vmovss	DWORD PTR [rcx+60], xmm0
$LN126@oddeven:

; 235  : 	cmpswap(18, 20);

	vmovss	xmm0, DWORD PTR [rcx+72]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN127@oddeven
	vmovss	DWORD PTR [rcx+80], xmm0
	vmovss	DWORD PTR [rcx+72], xmm1
$LN127@oddeven:

; 236  : 	cmpswap(19, 21);

	vmovss	xmm0, DWORD PTR [rcx+76]
	vmovss	xmm1, DWORD PTR [rcx+84]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN128@oddeven
	vmovss	DWORD PTR [rcx+84], xmm0
	vmovss	DWORD PTR [rcx+76], xmm1
$LN128@oddeven:

; 237  : 	cmpswap(22, 24);

	vmovss	xmm0, DWORD PTR [rcx+88]
	vmovss	xmm1, DWORD PTR [rcx+96]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN129@oddeven
	vmovss	DWORD PTR [rcx+96], xmm0
	vmovss	DWORD PTR [rcx+88], xmm1
$LN129@oddeven:

; 238  : 
; 239  : 
; 240  : 	cmpswap(1, 2);

	vmovss	xmm0, DWORD PTR [rcx+4]
	vmovss	xmm1, DWORD PTR [rcx+8]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN130@oddeven
	vmovss	DWORD PTR [rcx+8], xmm0
	vmovss	DWORD PTR [rcx+4], xmm1
$LN130@oddeven:

; 241  : 	cmpswap(3, 4);

	vmovss	xmm0, DWORD PTR [rcx+12]
	vmovss	xmm1, DWORD PTR [rcx+16]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN131@oddeven
	vmovss	DWORD PTR [rcx+16], xmm0
	vmovss	DWORD PTR [rcx+12], xmm1
$LN131@oddeven:

; 242  : 	cmpswap(5, 6);

	vmovss	xmm0, DWORD PTR [rcx+20]
	vmovss	xmm1, DWORD PTR [rcx+24]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN132@oddeven
	vmovss	DWORD PTR [rcx+24], xmm0
	vmovss	DWORD PTR [rcx+20], xmm1
$LN132@oddeven:

; 243  : 	cmpswap(7, 8);

	vmovss	xmm0, DWORD PTR [rcx+28]
	vmovss	xmm1, DWORD PTR [rcx+32]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN133@oddeven
	vmovss	DWORD PTR [rcx+32], xmm0
	vmovss	DWORD PTR [rcx+28], xmm1
$LN133@oddeven:

; 244  : 	cmpswap(9, 10);

	vmovss	xmm0, DWORD PTR [rcx+36]
	vmovss	xmm1, DWORD PTR [rcx+40]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN134@oddeven
	vmovss	DWORD PTR [rcx+40], xmm0
	vmovss	DWORD PTR [rcx+36], xmm1
$LN134@oddeven:

; 245  : 	cmpswap(11, 12);

	vmovss	xmm0, DWORD PTR [rcx+44]
	vmovss	xmm1, DWORD PTR [rcx+48]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN135@oddeven
	vmovss	DWORD PTR [rcx+48], xmm0
	vmovss	DWORD PTR [rcx+44], xmm1
$LN135@oddeven:

; 246  : 	cmpswap(13, 14);

	vmovss	xmm0, DWORD PTR [rcx+52]
	vmovss	xmm1, DWORD PTR [rcx+56]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN136@oddeven
	vmovss	DWORD PTR [rcx+56], xmm0
	vmovss	DWORD PTR [rcx+52], xmm1
$LN136@oddeven:

; 247  : 	cmpswap(15, 16);

	vmovss	xmm0, DWORD PTR [rcx+60]
	vmovss	xmm1, DWORD PTR [rcx+64]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN137@oddeven
	vmovss	DWORD PTR [rcx+64], xmm0
	vmovss	DWORD PTR [rcx+60], xmm1
$LN137@oddeven:

; 248  : 	cmpswap(17, 18);

	vmovss	xmm0, DWORD PTR [rcx+68]
	vmovss	xmm1, DWORD PTR [rcx+72]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN138@oddeven
	vmovss	DWORD PTR [rcx+72], xmm0
	vmovss	DWORD PTR [rcx+68], xmm1
$LN138@oddeven:

; 249  : 	cmpswap(19, 20);

	vmovss	xmm0, DWORD PTR [rcx+76]
	vmovss	xmm1, DWORD PTR [rcx+80]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN139@oddeven
	vmovss	DWORD PTR [rcx+80], xmm0
	vmovss	DWORD PTR [rcx+76], xmm1
$LN139@oddeven:

; 250  : 	cmpswap(21, 22);

	vmovss	xmm0, DWORD PTR [rcx+84]
	vmovss	xmm1, DWORD PTR [rcx+88]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN140@oddeven
	vmovss	DWORD PTR [rcx+88], xmm0
	vmovss	DWORD PTR [rcx+84], xmm1
$LN140@oddeven:

; 251  : 	cmpswap(23, 24);

	vmovss	xmm0, DWORD PTR [rcx+92]
	vmovss	xmm1, DWORD PTR [rcx+96]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN141@oddeven
	vmovss	DWORD PTR [rcx+96], xmm0
	vmovss	DWORD PTR [rcx+92], xmm1
$LN141@oddeven:

; 252  : }

	vmovaps	xmm6, XMMWORD PTR [rsp+112]
	vmovaps	xmm7, XMMWORD PTR [rsp+96]
	vmovaps	xmm8, XMMWORD PTR [rsp+80]
	vmovaps	xmm9, XMMWORD PTR [rsp+64]
	vmovaps	xmm10, XMMWORD PTR [rsp+48]
	vmovaps	xmm11, XMMWORD PTR [rsp+32]
	vmovaps	xmm12, XMMWORD PTR [rsp+16]
	vmovaps	xmm13, XMMWORD PTR [rsp]
	add	rsp, 136				; 00000088H
	ret	0
?oddeven@@YAXPEAM@Z ENDP				; oddeven
_TEXT	ENDS
END
