; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	D:\VS_Projects\Hetero_HW_1\_src\median_filter.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?median_filter@@YAXHHHHPAM0@Z			; median_filter
EXTRN	?odd_even_sort@@YAXPAM@Z:PROC			; odd_even_sort
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vs_projects\hetero_hw_1\_src\median_filter.cpp
;	COMDAT ?median_filter@@YAXHHHHPAM0@Z
_TEXT	SEGMENT
_row$ = -204						; size = 4
_col$ = -192						; size = 4
_i$ = -180						; size = 4
_col_filter$ = -168					; size = 4
_row_filter$ = -156					; size = 4
_ext_adress$ = -144					; size = 4
_rd_base$ = -132					; size = 4
_wr_base$ = -120					; size = 4
_data$ = -108						; size = 100
__$ArrayPad$ = -4					; size = 4
_imgHeight$ = 8						; size = 4
_imgWidth$ = 12						; size = 4
_imgHeightF$ = 16					; size = 4
_imgWidthF$ = 20					; size = 4
_imgFloatSrc$ = 24					; size = 4
_imgFloatDst$ = 28					; size = 4
?median_filter@@YAXHHHHPAM0@Z PROC			; median_filter, COMDAT

; 14   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 15   : 
; 16   : 	float data[SIZE] = { 0 };	//megfelelő méretü munkatömb

	xorps	xmm0, xmm0
	movss	DWORD PTR _data$[ebp], xmm0
	push	96					; 00000060H
	push	0
	lea	eax, DWORD PTR _data$[ebp+4]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 17   : 
; 18   : 
; 19   : 								// írási bázis: 0. sor, 0. oszlop (a kimenet NEM kiterjesztett)
; 20   : 	int wr_base = 0;

	mov	DWORD PTR _wr_base$[ebp], 0

; 21   : 	// olvasási bázis: a kiterjesztett kép bal felső pixele (ez az első konvolúció első bemeneti adata)
; 22   : 	int rd_base = 0;

	mov	DWORD PTR _rd_base$[ebp], 0

; 23   : 
; 24   : 	int ext_adress;
; 25   : 	// Végiglépkedünk a kép sorain
; 26   : 
; 27   : 	int row_filter;
; 28   : 	int col_filter;
; 29   : 	int i, col, row;
; 30   : 
; 31   : 	for (row = 0; row < imgHeight; row++)

	mov	DWORD PTR _row$[ebp], 0
	jmp	SHORT $LN4@median_fil
$LN2@median_fil:
	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 1
	mov	DWORD PTR _row$[ebp], eax
$LN4@median_fil:
	mov	eax, DWORD PTR _row$[ebp]
	cmp	eax, DWORD PTR _imgHeight$[ebp]
	jge	$LN3@median_fil

; 32   : 	{
; 33   : 		// A sorokon belül végiglépkedünk egy sor pixelein
; 34   : 
; 35   : 		for (col = 0; col < imgWidth; col++)

	mov	DWORD PTR _col$[ebp], 0
	jmp	SHORT $LN7@median_fil
$LN5@median_fil:
	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	mov	DWORD PTR _col$[ebp], eax
$LN7@median_fil:
	mov	eax, DWORD PTR _col$[ebp]
	cmp	eax, DWORD PTR _imgWidth$[ebp]
	jge	$LN6@median_fil

; 36   : 		{
; 37   : 			ext_adress = (row * imgWidthF + col) * 4;

	mov	eax, DWORD PTR _row$[ebp]
	imul	eax, DWORD PTR _imgWidthF$[ebp]
	add	eax, DWORD PTR _col$[ebp]
	shl	eax, 2
	mov	DWORD PTR _ext_adress$[ebp], eax

; 38   : 			wr_base = (row * imgWidth + col) * 4;

	mov	eax, DWORD PTR _row$[ebp]
	imul	eax, DWORD PTR _imgWidth$[ebp]
	add	eax, DWORD PTR _col$[ebp]
	shl	eax, 2
	mov	DWORD PTR _wr_base$[ebp], eax

; 39   : 
; 40   : 			for (i = 0; i < 4; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@median_fil
$LN8@median_fil:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@median_fil:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN9@median_fil

; 41   : 			{
; 42   : 				for (row_filter = 0; row_filter < FILTER_H; row_filter++)

	mov	DWORD PTR _row_filter$[ebp], 0
	jmp	SHORT $LN13@median_fil
$LN11@median_fil:
	mov	eax, DWORD PTR _row_filter$[ebp]
	add	eax, 1
	mov	DWORD PTR _row_filter$[ebp], eax
$LN13@median_fil:
	cmp	DWORD PTR _row_filter$[ebp], 5
	jge	SHORT $LN12@median_fil

; 43   : 				{
; 44   : 
; 45   : 					for (col_filter = 0; col_filter < FILTER_W; col_filter++)

	mov	DWORD PTR _col_filter$[ebp], 0
	jmp	SHORT $LN16@median_fil
$LN14@median_fil:
	mov	eax, DWORD PTR _col_filter$[ebp]
	add	eax, 1
	mov	DWORD PTR _col_filter$[ebp], eax
$LN16@median_fil:
	cmp	DWORD PTR _col_filter$[ebp], 5
	jge	SHORT $LN15@median_fil

; 46   : 					{
; 47   : 						//tömb feltöltése a szükséges adatokkal
; 48   : 						data[row_filter * FILTER_W + col_filter] = imgFloatSrc[ext_adress + (row_filter*imgWidthF + col_filter) * 4 + i];

	mov	eax, DWORD PTR _row_filter$[ebp]
	imul	eax, DWORD PTR _imgWidthF$[ebp]
	add	eax, DWORD PTR _col_filter$[ebp]
	mov	ecx, DWORD PTR _ext_adress$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	add	edx, DWORD PTR _i$[ebp]
	imul	eax, DWORD PTR _row_filter$[ebp], 5
	add	eax, DWORD PTR _col_filter$[ebp]
	mov	ecx, DWORD PTR _imgFloatSrc$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _data$[ebp+eax*4], edx

; 49   : 					}

	jmp	SHORT $LN14@median_fil
$LN15@median_fil:

; 50   : 				}

	jmp	SHORT $LN11@median_fil
$LN12@median_fil:

; 51   : 
; 52   : 				odd_even_sort(data);	//rendező alg

	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	call	?odd_even_sort@@YAXPAM@Z		; odd_even_sort
	add	esp, 4

; 53   : 				imgFloatDst[wr_base + i] = data[12];	//medián visszaadása

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _wr_base$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _imgFloatDst$[ebp]
	mov	ecx, DWORD PTR _data$[ebp+ecx]
	mov	DWORD PTR [eax+edx*4], ecx

; 54   : 			}

	jmp	$LN8@median_fil
$LN9@median_fil:

; 55   : 		}

	jmp	$LN5@median_fil
$LN6@median_fil:

; 56   : 	}

	jmp	$LN2@median_fil
$LN3@median_fil:

; 57   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@median_fil
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 400				; 00000190H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@median_fil:
	DD	1
	DD	$LN19@median_fil
$LN19@median_fil:
	DD	-108					; ffffff94H
	DD	100					; 00000064H
	DD	$LN18@median_fil
$LN18@median_fil:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
?median_filter@@YAXHHHHPAM0@Z ENDP			; median_filter
_TEXT	ENDS
END
