; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	D:\VS_Projects\Hetero_HW_1\_src\main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_printf
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?__LINE__Var@?0??main@@9@4JA			; `main'::`1'::__LINE__Var
PUBLIC	??_C@_09HDLCNAPM@input?4jpg?$AA@		; `string'
PUBLIC	??_C@_0BL@EIJCCJGD@Input?5resolution?3?5?$CF4dx?$CF4d?6?$AA@ ; `string'
PUBLIC	??_C@_0CJ@PEGMJKL@d?3?2vs_projects?2hetero_hw_1?2_src?2@ ; `string'
PUBLIC	??_C@_0BD@ICFMFDGO@Start?5convolution?6?$AA@	; `string'
PUBLIC	??_C@_0BD@NGKMKCMP@C?5CPU?5TIME?3?5?$CF4?44f?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@CKJPLJHO@C?5Mpixel?1s?3?5?$CF4?44f?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@GOPADODP@SSE?5CPU?5TIME?3?5?$CF4?44f?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@JCMDCFIO@SSE?5Mpixel?1s?3?5?$CF4?44f?6?$AA@ ; `string'
PUBLIC	??_C@_0L@DMOPMCBB@output?4jpg?$AA@		; `string'
PUBLIC	__real@408f400000000000
PUBLIC	__real@40f86a0000000000
PUBLIC	__real@412e848000000000
EXTRN	_clock:PROC
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	__imp__ilBindImage@4:PROC
EXTRN	__imp__ilDeleteImages@8:PROC
EXTRN	__imp__ilEnable@4:PROC
EXTRN	__imp__ilGenImages@8:PROC
EXTRN	__imp__ilGetData@0:PROC
EXTRN	__imp__ilGetInteger@4:PROC
EXTRN	__imp__ilInit@0:PROC
EXTRN	__imp__ilLoadImage@4:PROC
EXTRN	__imp__ilSaveImage@4:PROC
EXTRN	__imp__ilSetData@4:PROC
EXTRN	__imp__iluInit@0:PROC
EXTRN	__aligned_free_dbg:PROC
EXTRN	__aligned_malloc_dbg:PROC
EXTRN	?conv_filter_avx@@YAXHHHPAFPAE1@Z:PROC		; conv_filter_avx
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+06
CONST	ENDS
;	COMDAT __real@40f86a0000000000
CONST	SEGMENT
__real@40f86a0000000000 DQ 040f86a0000000000r	; 100000
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0L@DMOPMCBB@output?4jpg?$AA@
CONST	SEGMENT
??_C@_0L@DMOPMCBB@output?4jpg?$AA@ DB 'output.jpg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JCMDCFIO@SSE?5Mpixel?1s?3?5?$CF4?44f?6?$AA@
CONST	SEGMENT
??_C@_0BF@JCMDCFIO@SSE?5Mpixel?1s?3?5?$CF4?44f?6?$AA@ DB 'SSE Mpixel/s: %'
	DB	'4.4f', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GOPADODP@SSE?5CPU?5TIME?3?5?$CF4?44f?6?$AA@
CONST	SEGMENT
??_C@_0BF@GOPADODP@SSE?5CPU?5TIME?3?5?$CF4?44f?6?$AA@ DB 'SSE CPU TIME: %'
	DB	'4.4f', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CKJPLJHO@C?5Mpixel?1s?3?5?$CF4?44f?6?$AA@
CONST	SEGMENT
??_C@_0BD@CKJPLJHO@C?5Mpixel?1s?3?5?$CF4?44f?6?$AA@ DB 'C Mpixel/s: %4.4f'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NGKMKCMP@C?5CPU?5TIME?3?5?$CF4?44f?6?$AA@
CONST	SEGMENT
??_C@_0BD@NGKMKCMP@C?5CPU?5TIME?3?5?$CF4?44f?6?$AA@ DB 'C CPU TIME: %4.4f'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ICFMFDGO@Start?5convolution?6?$AA@
CONST	SEGMENT
??_C@_0BD@ICFMFDGO@Start?5convolution?6?$AA@ DB 'Start convolution', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PEGMJKL@d?3?2vs_projects?2hetero_hw_1?2_src?2@
CONST	SEGMENT
??_C@_0CJ@PEGMJKL@d?3?2vs_projects?2hetero_hw_1?2_src?2@ DB 'd:\vs_projec'
	DB	'ts\hetero_hw_1\_src\main.cpp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EIJCCJGD@Input?5resolution?3?5?$CF4dx?$CF4d?6?$AA@
CONST	SEGMENT
??_C@_0BL@EIJCCJGD@Input?5resolution?3?5?$CF4dx?$CF4d?6?$AA@ DB 'Input re'
	DB	'solution: %4dx%4d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HDLCNAPM@input?4jpg?$AA@
CONST	SEGMENT
??_C@_09HDLCNAPM@input?4jpg?$AA@ DB 'input.jpg', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??main@@9@4JA
_DATA	SEGMENT
?__LINE__Var@?0??main@@9@4JA DD 015H			; `main'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vs_projects\hetero_hw_1\_src\main.cpp
;	COMDAT _main
_TEXT	SEGMENT
_pixel_dst$1 = -380					; size = 4
_pixel_src$2 = -368					; size = 4
_r$3 = -356						; size = 4
_r$4 = -344						; size = 4
_imgDstConv$ = -332					; size = 4
_mpixel$ = -320						; size = 8
_filter_laplace$ = -304					; size = 50
_d0$ = -244						; size = 8
_e0$ = -228						; size = 4
_s0$ = -216						; size = 4
_imgRes$ = -204						; size = 4
_pixel_src$5 = -192					; size = 4
_pixel_dst$6 = -180					; size = 4
_pixel$7 = -168						; size = 4
_col$ = -156						; size = 4
_row$ = -144						; size = 4
_imgFOfssetH$ = -132					; size = 4
_imgFOfssetW$ = -120					; size = 4
_imgHeightF$ = -108					; size = 4
_imgWidthF$ = -96					; size = 4
_imgSrcExt$ = -84					; size = 4
_imgOrigin$ = -72					; size = 4
_imgHeight$ = -60					; size = 4
_imgWidth$ = -48					; size = 4
_imgData$ = -36						; size = 4
_ilImg$ = -24						; size = 4
_ret$ = -9						; size = 1
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 576				; 00000240H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-576]
	mov	ecx, 144				; 00000090H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 22   : 	ilInit(); iluInit();

	mov	esi, esp
	call	DWORD PTR __imp__ilInit@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	call	DWORD PTR __imp__iluInit@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 23   : 	ILboolean ret;
; 24   : 	ILuint ilImg=0;

	mov	DWORD PTR _ilImg$[ebp], 0

; 25   : 	ilGenImages(1, &ilImg);

	mov	esi, esp
	lea	eax, DWORD PTR _ilImg$[ebp]
	push	eax
	push	1
	call	DWORD PTR __imp__ilGenImages@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 26   : 	ilBindImage(ilImg);

	mov	esi, esp
	mov	eax, DWORD PTR _ilImg$[ebp]
	push	eax
	call	DWORD PTR __imp__ilBindImage@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 27   :     ret = ilLoadImage((const char*)("input.jpg"));

	mov	esi, esp
	push	OFFSET ??_C@_09HDLCNAPM@input?4jpg?$AA@
	call	DWORD PTR __imp__ilLoadImage@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _ret$[ebp], al

; 28   : 	ILubyte* imgData = ilGetData(); 

	mov	esi, esp
	call	DWORD PTR __imp__ilGetData@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _imgData$[ebp], eax

; 29   : 
; 30   : 	int imgWidth = ilGetInteger(IL_IMAGE_WIDTH);

	mov	esi, esp
	push	3556					; 00000de4H
	call	DWORD PTR __imp__ilGetInteger@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _imgWidth$[ebp], eax

; 31   : 	int imgHeight = ilGetInteger(IL_IMAGE_HEIGHT);

	mov	esi, esp
	push	3557					; 00000de5H
	call	DWORD PTR __imp__ilGetInteger@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _imgHeight$[ebp], eax

; 32   : 	ILint imgOrigin = ilGetInteger(IL_ORIGIN_MODE);

	mov	esi, esp
	push	1539					; 00000603H
	call	DWORD PTR __imp__ilGetInteger@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _imgOrigin$[ebp], eax

; 33   : 
; 34   : 	printf("Input resolution: %4dx%4d\n", imgWidth, imgHeight);

	mov	eax, DWORD PTR _imgHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _imgWidth$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BL@EIJCCJGD@Input?5resolution?3?5?$CF4dx?$CF4d?6?$AA@
	call	_printf
	add	esp, 12					; 0000000cH

; 35   : 
; 36   : 	unsigned char *imgSrcExt;
; 37   : 	int imgWidthF = imgWidth+FILTER_W-1;

	mov	eax, DWORD PTR _imgWidth$[ebp]
	add	eax, 4
	mov	DWORD PTR _imgWidthF$[ebp], eax

; 38   : 	int imgHeightF = imgHeight+FILTER_H-1;

	mov	eax, DWORD PTR _imgHeight$[ebp]
	add	eax, 4
	mov	DWORD PTR _imgHeightF$[ebp], eax

; 39   : 	int imgFOfssetW = (FILTER_W-1)/2;

	mov	DWORD PTR _imgFOfssetW$[ebp], 2

; 40   : 	int imgFOfssetH = (FILTER_H-1)/2;

	mov	DWORD PTR _imgFOfssetH$[ebp], 2

; 41   : 	imgSrcExt = (unsigned char *)(_aligned_malloc(3*imgWidthF*imgHeightF*sizeof(unsigned char), 32));

	mov	eax, DWORD PTR ?__LINE__Var@?0??main@@9@4JA
	add	eax, 20					; 00000014H
	push	eax
	push	OFFSET ??_C@_0CJ@PEGMJKL@d?3?2vs_projects?2hetero_hw_1?2_src?2@
	push	32					; 00000020H
	imul	ecx, DWORD PTR _imgWidthF$[ebp], 3
	imul	ecx, DWORD PTR _imgHeightF$[ebp]
	push	ecx
	call	__aligned_malloc_dbg
	add	esp, 16					; 00000010H
	mov	DWORD PTR _imgSrcExt$[ebp], eax

; 42   :     int row, col;
; 43   : 
; 44   : 	for (row=0; row<imgHeightF; row++)

	mov	DWORD PTR _row$[ebp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 1
	mov	DWORD PTR _row$[ebp], eax
$LN4@main:
	mov	eax, DWORD PTR _row$[ebp]
	cmp	eax, DWORD PTR _imgHeightF$[ebp]
	jge	SHORT $LN3@main

; 45   : 	{
; 46   : 		for (col=0; col<imgWidthF;col++)

	mov	DWORD PTR _col$[ebp], 0
	jmp	SHORT $LN7@main
$LN5@main:
	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	mov	DWORD PTR _col$[ebp], eax
$LN7@main:
	mov	eax, DWORD PTR _col$[ebp]
	cmp	eax, DWORD PTR _imgWidthF$[ebp]
	jge	SHORT $LN6@main

; 47   : 		{
; 48   : 			int pixel = (row*imgWidthF + col)*3;

	mov	eax, DWORD PTR _row$[ebp]
	imul	eax, DWORD PTR _imgWidthF$[ebp]
	add	eax, DWORD PTR _col$[ebp]
	imul	ecx, eax, 3
	mov	DWORD PTR _pixel$7[ebp], ecx

; 49   : 			*(imgSrcExt + pixel + 0) = 0;

	mov	eax, DWORD PTR _imgSrcExt$[ebp]
	add	eax, DWORD PTR _pixel$7[ebp]
	mov	BYTE PTR [eax], 0

; 50   : 			*(imgSrcExt + pixel + 1) = 0;

	mov	eax, DWORD PTR _imgSrcExt$[ebp]
	add	eax, DWORD PTR _pixel$7[ebp]
	mov	BYTE PTR [eax+1], 0

; 51   : 			*(imgSrcExt + pixel + 2) = 0;

	mov	eax, DWORD PTR _imgSrcExt$[ebp]
	add	eax, DWORD PTR _pixel$7[ebp]
	mov	BYTE PTR [eax+2], 0

; 52   : 		}

	jmp	SHORT $LN5@main
$LN6@main:

; 53   : 	}

	jmp	$LN2@main
$LN3@main:

; 54   : 
; 55   : 	for (row=0; row<imgHeight; row++)

	mov	DWORD PTR _row$[ebp], 0
	jmp	SHORT $LN10@main
$LN8@main:
	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 1
	mov	DWORD PTR _row$[ebp], eax
$LN10@main:
	mov	eax, DWORD PTR _row$[ebp]
	cmp	eax, DWORD PTR _imgHeight$[ebp]
	jge	$LN9@main

; 56   : 	{
; 57   : 		for (col=0; col<imgWidth;col++)

	mov	DWORD PTR _col$[ebp], 0
	jmp	SHORT $LN13@main
$LN11@main:
	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	mov	DWORD PTR _col$[ebp], eax
$LN13@main:
	mov	eax, DWORD PTR _col$[ebp]
	cmp	eax, DWORD PTR _imgWidth$[ebp]
	jge	$LN12@main

; 58   : 		{
; 59   : 			int pixel_dst = ((row+imgFOfssetH)*imgWidthF + (col+imgFOfssetW))*3;

	mov	eax, DWORD PTR _row$[ebp]
	add	eax, DWORD PTR _imgFOfssetH$[ebp]
	imul	eax, DWORD PTR _imgWidthF$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	add	ecx, DWORD PTR _imgFOfssetW$[ebp]
	add	eax, ecx
	imul	edx, eax, 3
	mov	DWORD PTR _pixel_dst$6[ebp], edx

; 60   : 			int pixel_src = (row*imgWidth + col)*3;

	mov	eax, DWORD PTR _row$[ebp]
	imul	eax, DWORD PTR _imgWidth$[ebp]
	add	eax, DWORD PTR _col$[ebp]
	imul	ecx, eax, 3
	mov	DWORD PTR _pixel_src$5[ebp], ecx

; 61   : 			*(imgSrcExt + pixel_dst + 0) = (unsigned char)(*(imgData + pixel_src + 0));

	mov	eax, DWORD PTR _imgSrcExt$[ebp]
	add	eax, DWORD PTR _pixel_dst$6[ebp]
	mov	ecx, DWORD PTR _imgData$[ebp]
	add	ecx, DWORD PTR _pixel_src$5[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 62   : 			*(imgSrcExt + pixel_dst + 1) = (unsigned char)(*(imgData + pixel_src + 1));

	mov	eax, DWORD PTR _imgSrcExt$[ebp]
	add	eax, DWORD PTR _pixel_dst$6[ebp]
	mov	ecx, DWORD PTR _imgData$[ebp]
	add	ecx, DWORD PTR _pixel_src$5[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+1], dl

; 63   : 			*(imgSrcExt + pixel_dst + 2) = (unsigned char)(*(imgData + pixel_src + 2));

	mov	eax, DWORD PTR _imgSrcExt$[ebp]
	add	eax, DWORD PTR _pixel_dst$6[ebp]
	mov	ecx, DWORD PTR _imgData$[ebp]
	add	ecx, DWORD PTR _pixel_src$5[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 64   : 		}

	jmp	$LN11@main
$LN12@main:

; 65   : 	}

	jmp	$LN8@main
$LN9@main:

; 66   : 
; 67   : 	unsigned char *imgRes;
; 68   : 	imgRes = (unsigned char *)(_aligned_malloc(3 * imgWidth*imgHeight * sizeof(unsigned char), 32));

	mov	eax, DWORD PTR ?__LINE__Var@?0??main@@9@4JA
	add	eax, 47					; 0000002fH
	push	eax
	push	OFFSET ??_C@_0CJ@PEGMJKL@d?3?2vs_projects?2hetero_hw_1?2_src?2@
	push	32					; 00000020H
	imul	ecx, DWORD PTR _imgWidth$[ebp], 3
	imul	ecx, DWORD PTR _imgHeight$[ebp]
	push	ecx
	call	__aligned_malloc_dbg
	add	esp, 16					; 00000010H
	mov	DWORD PTR _imgRes$[ebp], eax

; 69   : 
; 70   : // IMAGE PROCESSING
; 71   : //---------------------------------------------------------------------------------------
; 72   : 	clock_t s0, e0;
; 73   :     double d0;
; 74   : 
; 75   : 	short filter_laplace[] = {-1, -1, -1, -1, -1,

	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+2], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+4], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+6], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+8], ax

; 76   : 	                          -1, -1, -1, -1, -1,

	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+10], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+12], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+14], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+16], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+18], ax

; 77   : 	                          -1, -1, 24, -1, -1,

	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+20], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+22], ax
	mov	eax, 24					; 00000018H
	mov	WORD PTR _filter_laplace$[ebp+24], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+26], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+28], ax

; 78   : 		                      -1, -1, -1, -1, -1,

	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+30], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+32], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+34], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+36], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+38], ax

; 79   : 		                      -1, -1, -1, -1, -1};

	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+40], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+42], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+44], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+46], ax
	or	eax, -1
	mov	WORD PTR _filter_laplace$[ebp+48], ax

; 80   : 	double mpixel;
; 81   : 
; 82   : 	short *imgDstConv;
; 83   : 	imgDstConv = (short*)(_aligned_malloc(3 * imgWidthF*imgHeightF * sizeof(short), 32));

	mov	eax, DWORD PTR ?__LINE__Var@?0??main@@9@4JA
	add	eax, 62					; 0000003eH
	push	eax
	push	OFFSET ??_C@_0CJ@PEGMJKL@d?3?2vs_projects?2hetero_hw_1?2_src?2@
	push	32					; 00000020H
	imul	ecx, DWORD PTR _imgWidthF$[ebp], 3
	imul	ecx, DWORD PTR _imgHeightF$[ebp]
	shl	ecx, 1
	push	ecx
	call	__aligned_malloc_dbg
	add	esp, 16					; 00000010H
	mov	DWORD PTR _imgDstConv$[ebp], eax

; 84   : 
; 85   : 	printf("Start convolution\n");

	push	OFFSET ??_C@_0BD@ICFMFDGO@Start?5convolution?6?$AA@
	call	_printf
	add	esp, 4

; 86   : 	s0 = clock();

	call	_clock
	mov	DWORD PTR _s0$[ebp], eax

; 87   : for (int r=0; r<RUNS; r++)

	mov	DWORD PTR _r$4[ebp], 0
	jmp	SHORT $LN16@main
$LN14@main:
	mov	eax, DWORD PTR _r$4[ebp]
	add	eax, 1
	mov	DWORD PTR _r$4[ebp], eax
$LN16@main:
	cmp	DWORD PTR _r$4[ebp], 100		; 00000064H
	jge	SHORT $LN15@main

; 88   : {
; 89   : #if 0
; 90   : 	conv_filter(imgHeight, imgWidth, imgWidthF,
; 91   : 		filter_laplace, imgSrcExt, imgRes);
; 92   : #endif
; 93   : 
; 94   : #if 1
; 95   :     conv_filter_avx(imgHeight, imgWidth, imgWidthF,

	mov	eax, DWORD PTR _imgRes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _imgSrcExt$[ebp]
	push	ecx
	lea	edx, DWORD PTR _filter_laplace$[ebp]
	push	edx
	mov	eax, DWORD PTR _imgWidthF$[ebp]
	push	eax
	mov	ecx, DWORD PTR _imgWidth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _imgHeight$[ebp]
	push	edx
	call	?conv_filter_avx@@YAXHHHPAFPAE1@Z	; conv_filter_avx
	add	esp, 24					; 00000018H

; 96   : 				filter_laplace, imgSrcExt, imgRes);
; 97   : #endif
; 98   : }

	jmp	SHORT $LN14@main
$LN15@main:

; 99   : 
; 100  :     e0 = clock();

	call	_clock
	mov	DWORD PTR _e0$[ebp], eax

; 101  :     d0 = (double)(e0-s0)/(RUNS*CLOCKS_PER_SEC);

	mov	eax, DWORD PTR _e0$[ebp]
	sub	eax, DWORD PTR _s0$[ebp]
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@40f86a0000000000
	movsd	QWORD PTR _d0$[ebp], xmm0

; 102  : 	mpixel = (imgWidth*imgHeight/d0)/1000000;

	mov	eax, DWORD PTR _imgWidth$[ebp]
	imul	eax, DWORD PTR _imgHeight$[ebp]
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR _d0$[ebp]
	divsd	xmm0, QWORD PTR __real@412e848000000000
	movsd	QWORD PTR _mpixel$[ebp], xmm0

; 103  :     printf("C CPU TIME: %4.4f\n", d0);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _d0$[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BD@NGKMKCMP@C?5CPU?5TIME?3?5?$CF4?44f?6?$AA@
	call	_printf
	add	esp, 12					; 0000000cH

; 104  : 	printf("C Mpixel/s: %4.4f\n", mpixel);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _mpixel$[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BD@CKJPLJHO@C?5Mpixel?1s?3?5?$CF4?44f?6?$AA@
	call	_printf
	add	esp, 12					; 0000000cH

; 105  : 
; 106  : 
; 107  : 
; 108  : 	    s0 = clock();

	call	_clock
	mov	DWORD PTR _s0$[ebp], eax

; 109  : for (int r=0; r<RUNS; r++)

	mov	DWORD PTR _r$3[ebp], 0
	jmp	SHORT $LN19@main
$LN17@main:
	mov	eax, DWORD PTR _r$3[ebp]
	add	eax, 1
	mov	DWORD PTR _r$3[ebp], eax
$LN19@main:
	cmp	DWORD PTR _r$3[ebp], 100		; 00000064H
	jge	SHORT $LN18@main

; 110  : {
; 111  : /*
; 112  : 	conv_filter_sse(imgHeight, imgWidth, imgHeightF, imgWidthF,
; 113  : 				imgFOfssetH, imgFOfssetW,
; 114  : 				filter_laplace, imgFloat, imgFloatRes);
; 115  : 	
; 116  : 	conv_filter(imgHeight, imgWidth, imgHeightF, imgWidthF,
; 117  : 		imgFOfssetH, imgFOfssetW,
; 118  : 		filter_laplace, imgFloat, imgFloatRes);
; 119  : 
; 120  : 	conv_filter_block_sse(imgHeight, imgWidth, imgHeightF, imgWidthF,
; 121  : 		imgFOfssetH, imgFOfssetW,
; 122  : 		filter_laplace, imgFloat, imgFloatRes);
; 123  : */
; 124  : }

	jmp	SHORT $LN17@main
$LN18@main:

; 125  :     e0 = clock();

	call	_clock
	mov	DWORD PTR _e0$[ebp], eax

; 126  :     d0 = (double)(e0-s0)/(RUNS*CLOCKS_PER_SEC);

	mov	eax, DWORD PTR _e0$[ebp]
	sub	eax, DWORD PTR _s0$[ebp]
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@40f86a0000000000
	movsd	QWORD PTR _d0$[ebp], xmm0

; 127  : 	mpixel = (imgWidth*imgHeight/d0)/1000000;

	mov	eax, DWORD PTR _imgWidth$[ebp]
	imul	eax, DWORD PTR _imgHeight$[ebp]
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR _d0$[ebp]
	divsd	xmm0, QWORD PTR __real@412e848000000000
	movsd	QWORD PTR _mpixel$[ebp], xmm0

; 128  :     printf("SSE CPU TIME: %4.4f\n", d0*1000);

	movsd	xmm0, QWORD PTR _d0$[ebp]
	mulsd	xmm0, QWORD PTR __real@408f400000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BF@GOPADODP@SSE?5CPU?5TIME?3?5?$CF4?44f?6?$AA@
	call	_printf
	add	esp, 12					; 0000000cH

; 129  : 	printf("SSE Mpixel/s: %4.4f\n", mpixel);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _mpixel$[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BF@JCMDCFIO@SSE?5Mpixel?1s?3?5?$CF4?44f?6?$AA@
	call	_printf
	add	esp, 12					; 0000000cH

; 130  : 
; 131  : /*
; 132  :     s0 = clock();
; 133  : for (int r=0; r<RUNS; r++)
; 134  : {
; 135  :     conv_filter_asm(imgHeight, imgWidth, imgHeightF, imgWidthF,
; 136  : 				imgFOfssetH, imgFOfssetW,
; 137  : 				filter_laplace, imgFloat, imgFloatRes);
; 138  : }
; 139  :     e0 = clock();
; 140  :     d0 = (double)(e0-s0)/(RUNS*CLOCKS_PER_SEC);
; 141  : 	mpixel = (imgWidth*imgHeight/d0)/1000000;
; 142  : 	printf("ASM CPU TIME: %4.4f\n", d0);
; 143  : 	printf("ASM Mpixel/s: %4.4f\n", mpixel);
; 144  : */
; 145  : 
; 146  : //---------------------------------------------------------------------------------------
; 147  : // IMAGE PROCESSING END
; 148  : 
; 149  : 	for (row=0; row<imgHeight; row++)

	mov	DWORD PTR _row$[ebp], 0
	jmp	SHORT $LN22@main
$LN20@main:
	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 1
	mov	DWORD PTR _row$[ebp], eax
$LN22@main:
	mov	eax, DWORD PTR _row$[ebp]
	cmp	eax, DWORD PTR _imgHeight$[ebp]
	jge	$LN21@main

; 150  : 	{
; 151  : 		for (col=0; col<imgWidth;col++)

	mov	DWORD PTR _col$[ebp], 0
	jmp	SHORT $LN25@main
$LN23@main:
	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	mov	DWORD PTR _col$[ebp], eax
$LN25@main:
	mov	eax, DWORD PTR _col$[ebp]
	cmp	eax, DWORD PTR _imgWidth$[ebp]
	jge	$LN24@main

; 152  : 		{
; 153  : 			int pixel_src = (row*imgWidth + col)*3;

	mov	eax, DWORD PTR _row$[ebp]
	imul	eax, DWORD PTR _imgWidth$[ebp]
	add	eax, DWORD PTR _col$[ebp]
	imul	ecx, eax, 3
	mov	DWORD PTR _pixel_src$2[ebp], ecx

; 154  : 			int pixel_dst = (row*imgWidth + col)*3;

	mov	eax, DWORD PTR _row$[ebp]
	imul	eax, DWORD PTR _imgWidth$[ebp]
	add	eax, DWORD PTR _col$[ebp]
	imul	ecx, eax, 3
	mov	DWORD PTR _pixel_dst$1[ebp], ecx

; 155  : 			*(imgData + pixel_dst + 0) = (ILubyte)(*(imgRes + pixel_src + 0));

	mov	eax, DWORD PTR _imgData$[ebp]
	add	eax, DWORD PTR _pixel_dst$1[ebp]
	mov	ecx, DWORD PTR _imgRes$[ebp]
	add	ecx, DWORD PTR _pixel_src$2[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 156  : 			*(imgData + pixel_dst + 1) = (ILubyte)(*(imgRes + pixel_src + 1));

	mov	eax, DWORD PTR _imgData$[ebp]
	add	eax, DWORD PTR _pixel_dst$1[ebp]
	mov	ecx, DWORD PTR _imgRes$[ebp]
	add	ecx, DWORD PTR _pixel_src$2[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+1], dl

; 157  : 			*(imgData + pixel_dst + 2) = (ILubyte)(*(imgRes + pixel_src + 2));

	mov	eax, DWORD PTR _imgData$[ebp]
	add	eax, DWORD PTR _pixel_dst$1[ebp]
	mov	ecx, DWORD PTR _imgRes$[ebp]
	add	ecx, DWORD PTR _pixel_src$2[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl

; 158  : 		}

	jmp	$LN23@main
$LN24@main:

; 159  : 	}

	jmp	$LN20@main
$LN21@main:

; 160  : 
; 161  : 	_aligned_free(imgDstConv);

	mov	eax, DWORD PTR _imgDstConv$[ebp]
	push	eax
	call	__aligned_free_dbg
	add	esp, 4

; 162  : 	_aligned_free(imgSrcExt);

	mov	eax, DWORD PTR _imgSrcExt$[ebp]
	push	eax
	call	__aligned_free_dbg
	add	esp, 4

; 163  :     _aligned_free(imgRes);

	mov	eax, DWORD PTR _imgRes$[ebp]
	push	eax
	call	__aligned_free_dbg
	add	esp, 4

; 164  : 
; 165  : 	ret = ilSetData(imgData);

	mov	esi, esp
	mov	eax, DWORD PTR _imgData$[ebp]
	push	eax
	call	DWORD PTR __imp__ilSetData@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _ret$[ebp], al

; 166  : 	ilEnable(IL_FILE_OVERWRITE);

	mov	esi, esp
	push	1568					; 00000620H
	call	DWORD PTR __imp__ilEnable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 167  :     ilSaveImage((const char*)("output.jpg"));

	mov	esi, esp
	push	OFFSET ??_C@_0L@DMOPMCBB@output?4jpg?$AA@
	call	DWORD PTR __imp__ilSaveImage@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 168  : 	ilDeleteImages(1, &ilImg);

	mov	esi, esp
	lea	eax, DWORD PTR _ilImg$[ebp]
	push	eax
	push	1
	call	DWORD PTR __imp__ilDeleteImages@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 169  : }

	xor	eax, eax
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 576				; 00000240H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@main:
	DD	2
	DD	$LN29@main
$LN29@main:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN27@main
	DD	-304					; fffffed0H
	DD	50					; 00000032H
	DD	$LN28@main
$LN28@main:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN27@main:
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	73					; 00000049H
	DB	109					; 0000006dH
	DB	103					; 00000067H
	DB	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	call	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 961  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 144  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 85   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
